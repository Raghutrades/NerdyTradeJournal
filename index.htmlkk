<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NerdyTrades</title>
    <!-- Favicon - Place your favicon.ico in the root directory when hosting -->
    <link rel="icon" href="favicon.ico">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Chart.js Data Labels Plugin (for pie/doughnut charts) -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <!-- Lucide Icons CDN -->
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* Define CSS Variables for theming */
        :root { /* Dark Theme Variables (default) */
            --body-bg: #0d1117;
            --body-text: #c9d1d9; /* Base text color */
            --card-bg: #1f2937; /* Background for larger content blocks (modal, table headers) */
            --section-bg: #1f2937; /* Used for main content div backgrounds */
            --input-group-bg: #2d3748; /* Background for input wrappers and emotion items */
            --input-text: #c9d1d9; /* Text color inside inputs and icons in input groups */
            --accent-primary: #6366f1; /* Primary accent color (e.g., active states, buttons) */
            --accent-text-light: #a78bfa; /* Lighter accent text for headers */
            --border-color: #4a5568; /* Border color for cards/sections/inputs */
            --chart-grid-color: rgba(255,255,255,0.1); /* Chart grid lines */
            --chart-text-color: #c9d1d9; /* Chart axis labels and ticks */
            --btn-toggle-bg: #2d3748; /* Background for filter toggle buttons */
            --btn-toggle-text: #c9d1d9; /* Text for filter toggle buttons */
            --neutral-bg-hover: #111827; /* Hover background for neutral elements */
            --red-text: #ef4444; /* Red color for negative PnL */
            --green-text: #22c55e; /* Green color for positive PnL */

            /* User-provided theme variables - Harmonized */
            --card: var(--card-bg); /* Directly maps to existing card background */
            --border: var(--border-color); /* Directly maps to existing border color */
            --gold-primary: #FFD700; /* Distinct gold color for primary gold elements */
            --gold-secondary: #DAA520; /* Distinct gold color for secondary gold elements */
            --text: var(--body-text); /* Maps to body text for general text */
            --accent: var(--accent-primary); /* Maps to primary accent color */
            --golden-glow: #FFD700; /* For golden glow */

            /* F&O Specific - Dark Theme */
            --fno-active-green: #66BB6A; /* Material Green 400 */
            --fno-glow-color: rgba(102, 187, 106, 0.4);
            --fno-header-border-gradient-start: #4361ee;
            --fno-header-border-gradient-mid: #3a0ca3;
            --fno-header-border-gradient-end: #7209b7;
            --fno-title-shadow-color: rgba(255, 255, 255, 0.2);
            --fno-logo-bg-color: rgba(0,0,0,0.1);
            --fno-quote-gradient-start: #232a3a; /* Original dark start */
            --fno-quote-gradient-end: #1a202c; /* Original dark end */
            --fno-quote-shadow-color: rgba(0, 0, 0, 0.5);
            --fno-quote-inset-shadow-color: rgba(0, 0, 0, 0.4);
            --fno-quote-author-color: #fcd34d; /* Amber/Gold for author in dark theme */
            --fno-widget-bg-light: #f7f7f7;
            --fno-accent: #818cf8; /* Indigo */
        }

        html.light { /* Light Theme Variables */
            --body-bg: #f0f2f5;
            --body-text: #333;
            --card-bg: #ffffff;
            --section-bg: #ffffff;
            --input-group-bg: #f8f8f8;
            --input-text: #333;
            --accent-primary: #4f46e5;
            --accent-text-light: #6366f1;
            --border-color: #e0e2e5;
            --chart-grid-color: rgba(0,0,0,0.1);
            --chart-text-color: #333;
            --btn-toggle-bg: #e0e2e5;
            --btn-toggle-text: #333;
            --neutral-bg-hover: #f9fafb;
            --red-text: #dc2626;
            --green-text: #16a34a;

            /* User-provided theme variables - Harmonized for Light Theme */
            --card: var(--card-bg);
            --border: var(--border-color);
            --gold-primary: #FFBF00; /* Slightly different gold for light theme */
            --gold-secondary: #B8860B;
            --text: var(--body-text);
            --accent: var(--accent-primary);
            --golden-glow: #FFC04D; /* Lighter gold for light theme glow */

            /* F&O Specific - Light Theme */
            --fno-active-green: #4CAF50; /* Material Green 500 */
            --fno-glow-color: rgba(76, 175, 80, 0.4);
            --fno-header-border-gradient-start: #4361ee;
            --fno-header-border-gradient-mid: #3a0ca3;
            --fno-header-border-gradient-end: #7209b7;
            --fno-title-shadow-color: rgba(0, 0, 0, 0.1);
            --fno-logo-bg-color: rgba(255,255,255,0.05);
            --fno-quote-gradient-start: #ffffff; /* White */
            --fno-quote-gradient-end: #e0e0e0; /* Light gray */
            --fno-quote-shadow-color: rgba(0, 0, 0, 0.2);
            --fno-quote-inset-shadow-color: rgba(0, 0, 0, 0.1);
            --fno-quote-author-color: #4299e1; /* Blue for author in light theme */
            --fno-widget-bg-light: #f7f7f7;
            --fno-accent: #4299e1; /* Blue */
        }

        /* Base styles using variables */
        body {
            font-family: "Inter", sans-serif;
            background-color: var(--body-bg);
            color: var(--body-text);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        /* General Tailwind overrides using variables for consistency */
        .bg-gray-800 { background-color: var(--card-bg); } /* Sidebar */
        .text-gray-300 { color: var(--body-text); } /* Sidebar text */
        .hover\:bg-gray-700:hover { background-color: var(--input-group-bg); } /* Sidebar hover */
        .border-gray-700 { border-color: var(--border-color); } /* General borders */
        .bg-gray-900 { background-color: var(--section-bg); } /* Fallback, not strictly used now */

        /* Main content blocks, cards, and input groups */
        .bg-zinc-800 { background-color: var(--section-bg); border-color: var(--border-color); }
        .bg-zinc-700 { background-color: var(--input-group-bg); border-color: var(--border-color); }
        .text-zinc-400 { color: var(--input-text); } /* Icons and placeholder text in input groups */
        .text-zinc-300 { color: var(--body-text); } /* General secondary text */

        /* Input styling adjustments */
        input[type="text"],
        input[type="number"],
        input[type="date"],
        input[type="time"],
        select,
        textarea {
            background-color: transparent !important; /* Always transparent to inherit from input-group */
            border: none;
            outline: none;
            box-shadow: none;
            width: 100%;
            color: var(--input-text) !important; /* Input text color */
            padding: 0.5rem 0.75rem; /* Adjusted padding */
            font-size: 0.95rem; /* Slightly increased font size for inputs */
        }
        input:focus, select:focus, textarea:focus {
            outline: none !important;
            box-shadow: none !important;
            border-color: var(--accent-primary) !important; /* Focus border color */
            /* Add ring focus within input-group for visual feedback */
        }
        .input-group { /* Wrapper for inputs with icons */
            display: flex;
            align-items: center;
            background-color: var(--input-group-bg); /* Explicit background */
            border-radius: 0.375rem; /* Tailwind rounded-md */
            padding-right: 0.75rem; /* Tailwind pr-3 */
            border: 1px solid var(--border-color);
            transition: all 0.2s ease-in-out;
        }
        .input-group:focus-within {
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 2px color-mix(in srgb, var(--accent-primary) 50%, transparent); /* Custom focus ring */
        }
        .input-group i {
            color: var(--input-text); /* Icon color */
            margin-right: 0.75rem; /* Tailwind mr-3 */
            flex-shrink: 0;
            padding-left: 0.75rem; /* Add padding to icon side */
        }


        /* Responsive table */
        .trade-table-container {
            overflow-x: auto;
        }
        .trade-table {
            width: 100%;
            border-collapse: collapse;
        }
        .trade-table th, .trade-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }
        .trade-table th {
            background-color: var(--card-bg); /* Use card-bg for table header */
            font-weight: 600;
            color: var(--body-text); /* Header text color */
            text-transform: uppercase;
            font-size: 0.85rem;
        }
        .trade-table tr:hover {
            background-color: var(--neutral-bg-hover); /* Hover state */
        }

        /* Button styling */
        .btn-primary {
            background-image: linear-gradient(to right, var(--accent-primary), color-mix(in srgb, var(--accent-primary) 80%, purple));
            color: white;
            font-weight: bold;
            padding: 0.625rem 1.5rem; /* py-2.5 px-6 */
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-xl */
            transition: all 0.3s ease;
            transform: scale(1);
        }
        .btn-primary:hover {
            transform: scale(1.05);
            background-image: linear-gradient(to right, color-mix(in srgb, var(--accent-primary) 80%, purple), var(--accent-primary));
        }

        .btn-secondary {
            /* @apply bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-md shadow-lg transition-all duration-300; */
            background-color: color-mix(in srgb, var(--body-bg) 80%, var(--body-text) 20%); /* Custom gray background */
            color: var(--body-text);
            font-weight: 600; /* font-semibold */
            padding: 0.5rem 1rem; /* py-2 px-4 */
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* shadow-lg */
            transition: all 0.3s ease;
        }
        .btn-secondary:hover {
            background-color: color-mix(in srgb, var(--body-bg) 70%, var(--body-text) 30%);
        }

        .btn-danger {
            background-color: var(--red-text);
            color: white;
            font-weight: bold;
            padding: 0.625rem 1.5rem;
            border-radius: 0.375rem;
            box-shadow: 0 5px 15px rgba(239, 68, 68, 0.4);
            transition: all 0.3s ease;
        }
        .btn-danger:hover {
            background-color: color-mix(in srgb, var(--red-text) 80%, black);
            transform: scale(1.05);
        }

        /* Toggle button for filters */
        .btn-toggle {
            background-color: var(--btn-toggle-bg);
            color: var(--btn-toggle-text);
            @apply px-3 py-1 rounded-md text-sm transition-colors duration-200;
            border: 1px solid var(--border-color); /* Added border */
        }
        .btn-toggle:hover:not(.active) { /* Only on hover if not active */
            background-color: color-mix(in srgb, var(--btn-toggle-bg) 80%, var(--accent-primary) 20%);
            color: white;
            border-color: var(--accent-primary);
        }
        .btn-toggle.active {
            background-color: var(--accent-primary);
            color: white;
            @apply shadow-md;
            border-color: var(--accent-primary);
        }


        /* Modal styling */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.7); /* Black w/ opacity */
            align-items: center; /* Centering when flex is applied by JS */
            justify-content: center; /* Centering when flex is applied by JS */
        }

        .modal-content {
            background-color: var(--card-bg);
            margin: auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%; /* More responsive */
            max-width: 550px; /* Slightly wider for forms */
            box-shadow: 0 5px 15px rgba(0,0,0,0.5);
            position: relative;
            transform: translateY(-50px);
            animation: slideIn 0.3s forwards ease-out;
        }

        @keyframes slideIn {
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-close-button {
            color: var(--body-text);
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .modal-close-button:hover,
        .modal-close-button:focus {
            color: var(--accent-primary);
            text-decoration: none;
            cursor: pointer;
        }

        /* New styles for emoji emotion picker */
        .emotion-emoji-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 8px;
        }

        .emotion-emoji-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 8px;
            border-radius: 8px;
            cursor: pointer;
            background-color: var(--input-group-bg);
            border: 1px solid var(--border-color);
            transition: all 0.2s ease-in-out;
            font-size: 0.85rem;
            text-align: center;
            color: var(--input-text);
        }

        .emotion-emoji-item.selected {
            background-color: var(--accent-primary);
            border-color: var(--accent-primary);
            transform: scale(1.05);
            box-shadow: 0 0 10px color-mix(in srgb, var(--accent-primary) 50%, transparent);
            color: white; /* Ensure selected emoji text is white */
        }

        .emotion-emoji-item:hover:not(.selected) {
            background-color: color-mix(in srgb, var(--input-group-bg) 80%, var(--accent-primary) 20%);
            border-color: var(--accent-primary);
        }
        .emotion-emoji-item span.emoji {
            font-size: 1.8rem;
            margin-bottom: 4px;
        }

        /* Specific styles for Reflection entries */
        .reflection-entry {
            background-color: var(--input-group-bg); /* Use input-group-bg for consistency */
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
        }

        /* Ensure chart canvases have a defined height within their parent */
        .chart-container {
            position: relative; /* Needed for Chart.js to scale correctly */
            height: 350px; /* Fixed height for all chart canvases */
            width: 100%; /* Ensure it fills parent */
        }

        /* Hide data labels by default for all Chart.js charts */
        .chartjs-datalabels-group { display: none; }

        /* Custom styling for form sections */
        .form-section {
            background-color: var(--input-group-bg); /* Use input-group-bg for sections */
            padding: 1.25rem; /* Tailwind p-5 */
            border-radius: 0.5rem; /* Tailwind rounded-lg */
            margin-bottom: 1.5rem; /* Tailwind mb-6 */
            border: 1px solid var(--border-color);
        }

        .form-section-title {
            color: var(--accent-text-light); /* Header text color */
            font-size: 1.125rem; /* Tailwind text-lg */
            font-weight: 600; /* Tailwind font-semibold */
            margin-bottom: 1rem; /* Tailwind mb-4 */
        }

        /* Specific text colors for P&L based on theme */
        .text-emerald-400 { color: var(--green-text); }
        .text-red-400 { color: var(--red-text); }
        .text-indigo-400 { color: var(--accent-text-light); } /* General indigo accents */
        .text-indigo-300 { color: var(--accent-text-light); } /* General indigo accents */
        .text-indigo-200 { color: color-mix(in srgb, var(--accent-text-light) 80%, var(--body-text) 20%); } /* Sub-accent text */

        /* --- USER PROVIDED STYLES (FROM index (2).html) --- */

        /* Quote Container Styles */
        .quote-container {
            max-width: 800px;
            margin: 0 auto; /* Removed top/bottom margin to integrate into header */
            padding: 1rem; /* Reduced padding */
            background: linear-gradient(145deg, var(--card), color-mix(in srgb, var(--card) 80%, black)); /* Use var(--card) */
            border-radius: 12px;
            box-shadow:
                0 5px 15px rgba(0, 0, 0, 0.2), /* Reduced shadow for integration */
                inset 0 0 10px rgba(0, 0, 0, 0.1); /* Reduced inner shadow */
            transform: perspective(500px) rotateX(0deg); /* Removed initial rotation */
            position: relative;
            /* overflow: hidden; Removed to allow dynamic sizing */
            transition: all 0.4s ease;
            /* min-height: 80px; Adjusted min-height removed to auto-adjust */
            display: flex;
            flex-direction: column;
            justify-content: center;
            animation: float 6s ease-in-out infinite;
            flex-grow: 1; /* Allow it to grow in flex container */
            margin-left: 1rem; /* Space from title */
            margin-right: 1rem; /* Space from datetime */
        }

        @keyframes float {
            0%, 100% {
                transform: perspective(500px) rotateX(0deg) translateY(0); /* Adjusted rotation */
            }
            50% {
                transform: perspective(500px) rotateX(2deg) translateY(-5px); /* Adjusted rotation and movement */
            }
        }

        .quote-container:hover {
            animation: none;
            transform: perspective(500px) rotateX(2deg) translateY(-2px);
        }

        .quote-text {
            font-size: 1.1rem; /* Slightly smaller font */
            line-height: 1.5;
            font-style: italic;
            position: relative;
            z-index: 2;
            margin: 0;
            text-align: center;
            color: var(--text); /* Use var(--text) */
        }

        .quote-author {
            display: block;
            margin-top: 0.5rem; /* Reduced margin */
            text-align: right;
            font-weight: 600;
            color: var(--gold-primary); /* Use var(--gold-primary) */
            font-size: 0.85rem;
        }

        /* Header Styles */
        .header-main-section { /* Renamed to avoid conflict with `header` tag */
            display: flex; /* Use flexbox for overall header layout */
            align-items: center;
            justify-content: space-between; /* Distribute items */
            padding: 1rem 1.5rem; /* Reduced padding */
            background: var(--card); /* Use var(--card) */
            border-bottom: 1px solid var(--border); /* Use var(--border) */
            position: relative;
            border-radius: 0.5rem; /* rounded-lg */
            margin-bottom: 1.5rem; /* mb-6 */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* shadow-md */
        }

        .header-main-section::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #4361ee, #3a0ca3, #7209b7);
            filter: blur(4px);
        }
        /* header-logo is now only for sidebar */


        .datetime-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            text-align: right; /* Align text to the right */
            flex-shrink: 0; /* Prevent from shrinking */
        }

        .datetime-item {
            display: flex;
            justify-content: flex-end; /* Align label and value to right */
            gap: 0.5rem;
            font-size: 0.9rem;
            color: var(--text); /* Use var(--text) */
        }

        .datetime-label {
            font-weight: 600;
            color: var(--gold-secondary); /* Use var(--gold-secondary) */
        }

        /* Footer Styles */
        .app-footer { /* New class for the app's overall footer */
            text-align: center;
            padding: 1rem;
            font-size: 0.9rem;
            color: var(--text);
            border-top: 1px solid var(--border);
            flex-shrink: 0; /* Prevent from shrinking */
            width: 100%;
        }

        .app-footer a {
            color: var(--accent);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .app-footer a:hover {
            color: var(--gold-primary);
            text-decoration: underline;
        }


        /* Autocomplete styles */
        .autocomplete-suggestions {
            position: absolute;
            background-color: var(--input-group-bg);
            border: 1px solid var(--border-color);
            max-height: 200px;
            overflow-y: auto;
            z-index: 10;
            width: calc(100% - 3.5rem); /* Adjust width to match input-group, minus icon space */
            left: 3rem; /* Align with input after icon */
            border-radius: 0.375rem;
            top: 100%; /* Position below the input */
            margin-top: 4px; /* Small gap below input */
        }

        .autocomplete-suggestion-item {
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            color: var(--input-text);
            font-size: 0.95rem;
        }

        .autocomplete-suggestion-item:hover {
            background-color: var(--neutral-bg-hover);
        }

        .autocomplete-suggestion-item.active {
            background-color: var(--accent-primary);
            color: white;
        }

        /* Sidebar Specific Styles */
        aside#sidebar {
            position: fixed; /* Keep it fixed on the left */
            left: 0;
            top: 0;
            height: 100vh; /* Full viewport height */
            width: 250px; /* Fixed width for sidebar */
            z-index: 50; /* Ensure it's above main content when overlaying */
            transform: translateX(0); /* Ensure it's visible by default on desktop */
        }
        /* Mobile Specific: Hide sidebar by default on mobile, show on toggle */
        @media (max-width: 768px) {
            aside#sidebar {
                transform: translateX(-100%); /* Hidden by default on mobile */
                width: 200px; /* Smaller width for mobile */
                box-shadow: 0 0 20px rgba(0,0,0,0.5); /* Add shadow for overlay effect */
            }
            aside#sidebar.active {
                transform: translateX(0%); /* Show when active */
            }
            #main-content {
                margin-left: 0; /* No margin on mobile */
            }
            #menu-toggle {
                display: block; /* Show menu toggle on mobile */
            }
        }

        /* Adjust main content to make space for the sidebar on desktop */
        #main-content {
            margin-left: 250px; /* Offset for fixed sidebar width */
            flex: 1; /* Allow main content to grow */
        }
        @media (max-width: 768px) {
            #main-content {
                margin-left: 0; /* Remove margin when sidebar is hidden/overlay */
            }
        }

        /* --- F&O Specific Styles (from index (1).html) --- */

        .main-container-fno { /* Renamed to avoid conflict */
            background-color: var(--card); /* Uses main app's card bg */
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            border-radius: 0.75rem;
            padding: 1.5rem; /* p-6 sm:p-8 md:p-10 */
            margin-top: 1rem;
        }
        html.dark .main-container-fno {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
        }

        .back-button {
            transition: background-color 0.3s ease, transform 0.2s ease;
            background-color: var(--input-group-bg); /* Use app's input group bg for consistency */
            color: var(--body-text); /* Use app's body text */
            padding: 0.75rem 1.5rem; /* px-6 py-3 */
            border-radius: 0.5rem; /* rounded-lg */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); /* shadow-md */
            font-weight: 600; /* font-semibold */
            font-size: 1.125rem; /* text-lg */
            outline: none;
            border: 1px solid var(--border);
        }
        .back-button:hover {
            background-color: var(--neutral-bg-hover);
            transform: translateY(-2px);
        }

        /* Style for sector cards */
        .sector-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.3s ease;
            position: relative;
            overflow: hidden;
            background: linear-gradient(145deg, var(--accent-primary), color-mix(in srgb, var(--accent-primary) 80%, purple)); /* Use app's accent */
            color: white;
            padding: 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            transform: scale(1); /* Ensure initial scale is 1 */
        }
        .sector-card:hover {
            transform: translateY(-5px) scale(1.02); /* Slightly larger scale on hover */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15); /* Stronger shadow */
        }
        .sector-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0) 70%);
            transform: rotate(45deg);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }
        .sector-card:hover::before {
            opacity: 1;
        }

        /* Ticker item glow on hover */
        .ticker-item {
            transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.3s ease;
            position: relative;
            overflow: hidden;
            background-color: var(--input-group-bg); /* Use app's input group bg */
            color: var(--body-text); /* Use app's body text */
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            text-align: center;
            font-weight: 500;
            cursor: pointer;
        }
        .ticker-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 0 15px color-mix(in srgb, var(--accent-primary) 70%, transparent); /* Use app's accent */
            z-index: 10; /* Bring hovered item to front */
        }

        /* TradingView chart container styling */
        #fnoTradingviewChartContainer { /* Renamed ID */
            position: absolute;
            z-index: 100;
            background-color: var(--card); /* Uses theme variable */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            padding: 0.5rem;
            display: none; /* Hidden by default */
            transform: scale(0.9);
            opacity: 0;
            transition: transform 0.2s ease-out, opacity 0.2s ease-out;
            pointer-events: none; /* Allows clicks to pass through when hidden */
        }
        html.dark #fnoTradingviewChartContainer {
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
        }
        #fnoTradingviewChartContainer.visible {
            display: block;
            transform: scale(1);
            opacity: 1;
            pointer-events: auto; /* Enable clicks when visible */
        }

        /* Scan Mode Button Styles */
        .scan-mode-toggle {
            position: fixed;
            bottom: 2rem; /* Adjusted to be above footer */
            right: 2rem;
            background: var(--card); /* Uses container background color */
            border: 1px solid var(--border);
            border-radius: 50px;
            padding: 0.75rem 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            z-index: 100;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            font-weight: 500;
            color: var(--body-text);
            position: relative; /* Changed to relative to contain options */
        }
        @media (max-width: 768px) {
            .scan-mode-toggle {
                bottom: 1rem;
                right: 1rem;
                padding: 0.5rem 1rem;
            }
        }


        .scan-mode-toggle:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 25px var(--fno-glow-color); /* Uses fno-glow-color */
        }

        .scan-mode-toggle.active {
            background: linear-gradient(135deg, var(--fno-active-green), #2E7D32); /* Darker green for active state */
            color: white;
        }

        .scan-mode-toggle.active .scan-icon {
            filter: brightness(1.5);
        }

        /* Scan Mode Options Container */
        #fnoScanModeOptions { /* Renamed ID */
            position: absolute; /* Position relative to the parent .scan-mode-toggle */
            bottom: calc(100% + 1rem); /* 1rem above the toggle button */
            right: 0; /* Align to the right of the toggle button */
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 0.75rem;
            padding: 1rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            z-index: 100; /* Ensure it's above other content */
            display: none; /* Hidden by default, toggled to flex by JS */
            flex-direction: column;
            gap: 0.75rem;
            transition: all 0.3s ease;
            opacity: 0; /* Start hidden */
            transform: translateY(10px); /* Start slightly below */
            pointer-events: none; /* Disable interaction when hidden */
            min-width: 150px; /* Ensure buttons fit */
            align-items: center; /* Center buttons horizontally */
        }

        #fnoScanModeOptions.visible {
            display: flex; /* Show as flex column */
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto;
        }

        #fnoScanModeOptions button {
            font-weight: 500;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 100%; /* Make buttons fill the width */
            padding: 0.5rem 1rem; /* Adjust padding */
        }
        #fnoScanModeOptions button:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        /* Highlight animation for search result click */
        .ticker-item.highlight {
            animation: highlight-pulse 1.5s 2; /* Pulse twice */
        }
        @keyframes highlight-pulse {
            0% { box-shadow: 0 0 0px rgba(255, 255, 0, 0); background-color: var(--input-group-bg); }
            50% { box-shadow: 0 0 20px rgba(255, 255, 0, 0.7); background-color: #fef08a; } /* Yellow glow */
            100% { box-shadow: 0 0 0px rgba(255, 255, 0, 0); background-color: var(--input-group-bg); }
        }
        html.dark @keyframes highlight-pulse {
            0% { box-shadow: 0 0 0px rgba(255, 255, 0, 0); background-color: var(--input-group-bg); }
            50% { box-shadow: 0 0 20px rgba(255, 255, 0, 0.7); background-color: #a16207; } /* Darker yellow/orange glow */
            100% { box-shadow: 0 0 0px rgba(255, 255, 0, 0); background-color: var(--input-group-bg); }
        }

        /* Random Ticker Styles */
        .random-ticker-box {
            position: fixed;
            top: 20px;
            right: 20px;
            background: color-mix(in srgb, var(--accent-primary) 20%, transparent); /* Fixed background for visibility */
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 12px 16px;
            border: 1px solid var(--border);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            z-index: 100;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: all 0.3s ease;
            color: var(--body-text); /* Ensure text color adapts */
        }
        @media (max-width: 768px) {
            .random-ticker-box {
                position: absolute; /* Change to absolute to stay within scrollable content */
                top: auto;
                bottom: 7rem; /* Adjust position for mobile, above scan mode toggle */
                left: 50%;
                transform: translateX(-50%);
                width: fit-content;
                padding: 8px 12px;
                font-size: 0.9rem;
            }
            .random-ticker-label {
                font-size: 0.7rem;
            }
            .random-ticker-value {
                font-size: 1rem;
                min-width: 100px;
            }
        }

        .random-ticker-label {
            font-size: 0.8rem;
            color: var(--gold-primary);
            margin-bottom: 4px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .random-ticker-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--body-text);
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 120px;
            text-align: center;
            position: relative;
        }

        .random-ticker-value:hover {
            color: var(--accent);
            transform: scale(1.05);
        }

        /* Animation Styles */
        @keyframes shuffleIn {
            0% {
                opacity: 0;
                transform: translateY(5px) rotateX(90deg);
            }
            50% {
                opacity: 0.5;
            }
            100% {
                opacity: 1;
                transform: translateY(0) rotateX(0);
            }
        }

        .random-ticker-value.shuffle {
            animation: shuffleIn 0.5s ease-out forwards;
            transform-origin: top center;
        }

        /* Sector filter styles */
        .filter-container {
            display: flex;
            justify-content: flex-end; /* Align to right */
            margin-bottom: 1.5rem;
            gap: 1rem;
            align-items: center;
        }
        @media (max-width: 768px) {
            .filter-container {
                justify-content: center; /* Center on small screens */
                flex-wrap: wrap; /* Allow wrapping */
            }
        }

        .filter-label {
            font-weight: 600;
            color: var(--body-text);
        }

        .filter-select {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            border: 1px solid var(--border);
            background-color: var(--card);
            color: var(--body-text);
            cursor: pointer;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }
        .filter-select:focus {
            border-color: var(--accent);
            box-shadow: 0 0 0 2px color-mix(in srgb, var(--accent) 30%, transparent);
        }

        /* Sector count badge */
        .sector-card .count-badge {
            background-color: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 9999px; /* Full rounded */
            font-size: 0.8rem;
            font-weight: bold;
            margin-top: 0.5rem;
        }

        /* Market Weightage Section Styles */
        .market-weightage-container {
            max-width: 6xl;
            margin: 2rem auto;
            background-color: var(--card);
            border-radius: 0.75rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            padding: 2rem;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
            color: var(--body-text);
        }
        html.dark .market-weightage-container {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
        }

        .weightage-list {
            list-style: none;
            padding: 0;
            margin: 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .weightage-item {
            background-color: var(--input-group-bg);
            padding: 1rem;
            border-radius: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }
        .weightage-item:hover {
            background-color: color-mix(in srgb, var(--input-group-bg) 80%, var(--accent-primary) 10%);
        }

        .weightage-percentage {
            font-weight: bold;
            color: var(--fno-active-green);
        }

        /* F&O Search Bar Styles */
        .fno-search-container { /* Renamed class */
            max-width: 800px;
            margin: 0 auto;
            padding: 1rem 2rem;
            position: relative;
            z-index: 50; /* Ensure search results appear above other content */
        }
        @media (max-width: 768px) {
            .fno-search-container {
                padding: 1rem;
            }
        }

        .fno-search-input { /* Renamed class */
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--border);
            background: var(--card);
            color: var(--text);
            font-size: 1rem;
            outline: none;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
        }
        .fno-search-input::placeholder {
            color: var(--text);
            opacity: 0.7;
        }
        .fno-search-input:focus {
            border-color: var(--accent);
            box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent) 50%, transparent);
        }

        .fno-search-results { /* Renamed class */
            position: absolute;
            width: calc(100% - 4rem); /* Account for padding in container */
            max-height: 300px;
            overflow-y: auto;
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 8px;
            margin-top: 5px;
            z-index: 100;
            display: none;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        @media (max-width: 768px) {
            .fno-search-results {
                width: calc(100% - 2rem); /* Account for padding in container */
            }
        }
        html.dark .fno-search-results {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
        }

        .fno-search-result-item { /* Renamed class */
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid var(--border);
            color: var(--text);
            transition: background-color 0.2s ease;
        }

        .fno-search-result-item:last-child {
            border-bottom: none;
        }

        .fno-search-result-item:hover, .fno-search-result-item.highlighted-suggestion {
            background: color-mix(in srgb, var(--accent) 10%, transparent);
        }

    </style>
</head>
<body class="flex h-screen overflow-hidden flex-col">
    <!-- Sidebar -->
    <aside id="sidebar" class="sidebar bg-gray-800 text-gray-300 p-4 flex flex-col justify-between rounded-r-xl shadow-lg transition-all duration-300 ease-in-out">
        <div>
            <div class="header-logo mb-6">
                <i data-lucide="line-chart" class="mr-2"></i> NerdyTrades
            </div>
            <nav>
                <ul class="space-y-3">
                    <li>
                        <a href="#" id="nav-dashboard" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="layout-dashboard" class="mr-2"></i> Dashboard
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-fno-sectors" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="scan" class="mr-2"></i> F&O Sectors
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-add-trade" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="plus-circle" class="mr-2"></i> Add Trade
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-view-trades" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="clipboard-list" class="mr-2"></i> View Trades
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-analytics" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="bar-chart-2" class="mr-2"></i> Advanced Analytics
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-reflections" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="book-open" class="mr-2"></i> Reflections
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-lot-size-calculator" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="calculator" class="mr-2"></i> Lot Size Calculator
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-brokerage-calculator" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="percent" class="mr-2"></i> Brokerage Calculator
                        </a>
                    </li>
                    <li>
                        <a href="#" id="nav-settings" class="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors duration-200 text-sm">
                            <i data-lucide="settings" class="mr-2"></i> Settings
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
        <div class="mt-6">
            <button id="theme-toggle" class="w-full flex items-center justify-center p-2 rounded-lg bg-gray-700 hover:bg-gray-600 transition-colors duration-200 text-white text-sm">
                <i data-lucide="sun-moon" class="mr-2"></i> Toggle Theme
            </button>
        </div>
    </aside>

    <!-- Main Content Area -->
    <div id="main-content" class="flex-1 p-6 transition-all duration-300 ease-in-out flex flex-col overflow-y-auto">
        <!-- Mobile Menu Toggle Button -->
        <button id="menu-toggle" class="md:hidden p-2 rounded-lg bg-gray-700 text-white mb-4 text-sm self-start">
            <i data-lucide="menu"></i>
        </button>

        <!-- Consolidated Header Section: Quote, Datetime -->
        <div class="header-main-section">
            <!-- Quote Container -->
            <div class="quote-container">
                <p class="quote-text" id="quoteText">"The market is a device for transferring money from the impatient to the patient."</p>
                <span class="quote-author" id="quoteAuthor">- Warren Buffett</span>
            </div>
            <!-- Datetime Container -->
            <div class="flex flex-col items-end ml-4">
                <div class="datetime-container">
                    <div class="datetime-item">
                        <span class="datetime-label">Date:</span>
                        <span id="current-date">Loading...</span>
                    </div>
                    <div class="datetime-item">
                        <span class="datetime-label">Time:</span>
                        <span id="current-time">Loading...</span>
                    </div>
                    <div class="datetime-item">
                        <span class="datetime-label">Remaining in Month:</span>
                        <span id="days-month">Loading...</span>
                    </div>
                    <div class="datetime-item">
                        <span class="datetime-label">Remaining in Year:</span>
                        <span id="days-year">Loading...</span>
                    </div>
                </div>
            </div>
        </div>


        <!-- Dynamic Content Area -->
        <div id="app-content" class="flex-1">
            <!-- Content will be loaded here dynamically -->
        </div>

        <!-- Custom Message Box Modal -->
        <div id="message-modal" class="modal">
            <div class="modal-content">
                <span class="modal-close-button" id="message-close-button">&times;</span>
                <h3 id="message-title" class="text-xl font-semibold mb-4 text-indigo-400"></h3>
                <p id="message-text" class="text-zinc-300"></p>
                <div class="mt-6 flex justify-end">
                    <button id="message-ok-button" class="btn-primary">OK</button>
                </div>
            </div>
        </div>

        <!-- F&O Specific Elements (hidden by default, managed by JS) -->
        <!-- TradingView Chart Container (hidden by default) -->
        <div id="fnoTradingviewChartContainer" class="rounded-xl">
            <!-- TradingView widget will be injected here -->
        </div>

        <!-- Scan Mode Toggle Button -->
        <button class="scan-mode-toggle" id="fnoScanModeToggle" title="Scan Mode (Ctrl+Shift+S)">
            <span class="scan-icon">🔍</span>
            <span>Scan Mode</span>
            <!-- Scan Mode Options (initially hidden) - Moved inside to allow relative positioning -->
            <div id="fnoScanModeOptions" class="absolute bg-gray-200 dark:bg-gray-700 p-3 rounded-xl shadow-lg z-100 hidden flex-col gap-2">
                <p class="text-sm font-semibold text-gray-700 dark:text-gray-200">Open charts in:</p>
                <button id="fnoScanModePopupBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">Popup (2)</button>
                <button id="fnoScanModeNewTabBtn" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-lg text-sm transition-colors">New Tab (1)</button>
            </div>
        </button>

        <!-- Random Ticker Box -->
        <div class="random-ticker-box">
            <div class="random-ticker-label">Random Ticker</div>
            <div class="random-ticker-value" id="fnoRandomTicker">Loading...</div>
        </div>

    </div>
    <!-- Footer with Social Handles -->
    <div class="app-footer">
        Developed by ❤️ <a href="https://www.instagram.com/nerdyintruder/" target="_blank">@Nerdyintruder</a>
    </div>

    <script>
        // Register Chart.js Data Labels Plugin
        Chart.register(ChartDataLabels);
        // Initialize Lucide icons
        lucide.createIcons();

        // --- Global Variables and Constants ---
        const DB_NAME = 'TradingJournalDB';
        const DB_VERSION = 2; // Current DB version
        const STORE_TRADES = 'trades';
        const STORE_REFLECTIONS = 'reflections'; // New IndexedDB store for reflections

        let db; // IndexedDB instance

        // User-provided quotes data
        const quotesData = [
            { text: "Opportunities don't happen, you create them.", author: "" },
            { text: "The market is always right. Never argue with it.", author: "" },
            { text: "Price is what you pay. Value is what you get.", author: "Benjamin Graham" },
            { text: "The stock market is a device for transferring money from the impatient to the patient.", author: "Warren Buffett" },
            { text: "Rule No. 1: Never lose money. Rule No. 2: Never forget Rule No. 1.", author: "Warren Buffett" },
            { text: "The four most dangerous words in investing are: 'This time it's different.'", author: "Sir John Templeton" },
            { text: "Successful trading is not about being right, it's about making money when you are right and losing less when you are wrong.", author: "Unknown" },
            { text: "The market has a way of humbling even the most arrogant.", author: "Unknown" },
            { text: "Amateurs think about how much money they can make. Professionals think about how much they can lose.", author: "Jack Schwager" },
            { text: "Don't tell me what you 'think' about the market. Tell me what you 'know' with your positions.", author: "Mark Douglas" },
            { text: "Every position you take involves risk. If you can't handle the risk, don't take the position.", author: "Unknown" },
            { text: "The goal is not to trade often, but to trade well.", author: "Unknown" },
            { text: "Trading is a marathon, not a sprint. Consistency is key.", author: "Unknown" },
            { text: "Cut your losses short, let your winners run.", author: "Jesse Livermore" },
            { text: "The biggest enemy of a good plan is the dream of a perfect plan.", author: "Carl von Clausewitz" },
            { text: "Fear and greed are the two most powerful emotions in the market.", author: "Unknown" },
            { text: "The market doesn't care about your opinions.", author: "Unknown" },
            { text: "Do more of what works, less of what doesn't.", author: "Unknown" },
            { text: "The trend is your friend, until it bends.", author: "Unknown" },
            { text: "Patience is a virtue in trading.", author: "Unknown" },
            { text: "It's not about catching tops or bottoms, but about catching the middle.", author: "Unknown" },
            { text: "The price of success is hard work, dedication to the job at hand, and the determination that whether we win or lose, we have applied the best of ourselves to the task at hand.", author: "Vince Lombardi" },
            { text: "The more you learn, the more you earn.", author: "Warren Buffett" },
            { text: "Trading is 80% psychology, 20% methodology.", author: "Unknown" },
            { text: "Focus on risk management, not just profits.", author: "Unknown" },
            { text: "Never risk more than you can afford to lose.", author: "Unknown" },
            { text: "A disciplined trader always follows his plan.", author: "Unknown" },
            { text: "Learn from your mistakes, but don't dwell on them.", author: "Unknown" },
            { text: "The market is always right.", author: "Unknown" },
            { text: "Trade what you see, not what you think.", author: "Unknown" },
            { text: "Success is not final, failure is not fatal: it is the courage to continue that counts.", author: "Winston Churchill" },
            { text: "The secret to success is to know something nobody else knows.", author: "Aristotle Onassis" },
            { text: "Opportunities come infrequently. When it rains gold, put out the bucket, not the thimble.", author: "Warren Buffett" },
            { text: "It takes courage to be a market leader.", author: "Paul Tudor Jones" },
            { text: "There is a time for patience and a time for action.", author: "Unknown" },
            { text: "Consistency over intensity.", author: "Unknown" },
            { text: "The purpose of a trading plan is to provide a road map for consistent action.", author: "Unknown" },
            { text: "Don't chase the market. Let the market come to you.", author: "Unknown" },
            { text: "The hardest money to make is money you need.", author: "Unknown" },
            { text: "Trading is about controlling your emotions.", author: "Unknown" },
            { text: "The journey of a thousand miles begins with a single step.", author: "Lao Tzu" },
            { text: "The only way to do great work is to love what you do.", author: "Steve Jobs" },
            { text: "Believe you can and you're halfway there.", author: "Theodore Roosevelt" },
            { text: "The best revenge is massive success.", author: "Frank Sinatra" },
            { text: "Perfection is not attainable, but if we chase perfection we can catch excellence.", author: "Vince Lombardi" },
            { text: "Your attitude, not your aptitude, will determine your altitude.", author: "Zig Ziglar" },
            { text: "The future belongs to those who believe in the beauty of their dreams.", author: "Eleanor Roosevelt" },
            { text: "It does not matter how slowly you go as long as you do not stop.", author: "Confucius" },
            { text: "The mind is everything. What you think you become.", author: "Buddha" },
            { text: "Eighty percent of success is showing up.", author: "Woody Allen" },
            { text: "Winning isn't everything, but wanting to win is.", author: "Vince Lombardi" },
            { text: "Great minds discuss ideas; average minds discuss events; small minds discuss people.", author: "Eleanor Roosevelt" },
            { text: "The only limit to our realization of tomorrow will be our doubts of today.", author: "Franklin D. Roosevelt" },
            { text: "The greatest glory in living lies not in never falling, but in rising every time we fall. - Nelson Mandela", author: "Nelson Mandela" },
            { text: "You miss 100% of the shots you don't take.", author: "Wayne Gretzky" },
            { text: "The best way to predict the future is to create it.", author: "Peter Drucker" },
            { text: "If you want to lift yourself up, lift up someone else.", author: "Booker T. Washington" },
            { text: "Action is the foundational key to all success.", author: "Pablo Picasso" },
            { text: "Success is not final, failure is not fatal: it is the courage to continue that counts.", author: "Winston Churchill" },
            { text: "The difference between a successful person and others is not a lack of strength, not a lack of knowledge, but rather a lack of will.", author: "Vince Lombardi" },
            { text: "The only place where success comes before work is in the dictionary.", author: "Vidal Sassoon" },
            { text: "The road to success and the road to failure are almost exactly the same.", author: "Colin R. Davis" },
            { text: "Opportunities don't happen, you create them.", author: "Chris Grosser" },
            { text: "To be successful, you must accept all challenges that come your way. You can't just accept the ones you like.", author: "Mike Gafka" },
            { text: "What seems to us as bitter trials are often blessings in disguise.", author: "Oscar Wilde" },
            { text: "The most difficult thing is the decision to act, the rest is merely tenacity.", author: "Amelia Earhart" },
            { text: "It is during our darkest moments that we must focus to see the light.", author: "Aristotle" },
            { text: "There is only one way to avoid criticism: do nothing, say nothing, and be nothing.", author: "Aristotle" },
            { text: "The only person you are destined to become is the person you decide to be.", author: "Ralph Waldo Emerson" },
            { text: "When you cease to dream, you cease to live.", author: "Malcolm Forbes" },
            { text: "The best way to gain self-confidence is to do what you are afraid to do.", author: "Swati Sharma" },
            { text: "The greatest discovery of all time is that a person can change his future by merely changing his attitude.", author: "Oprah Winfrey" },
            { text: "We are what we repeatedly do. Excellence, then, is not an act, but a habit.", author: "Aristotle" },
            { text: "Start where you are. Use what you have. Do what you can.", author: "Arthur Ashe" },
            { text: "The mind is a powerful thing. It can make you into whatever you want to be.", author: "Unknown" },
            { text: "If you have integrity, nothing else matters. If you don't have integrity, nothing else matters.", author: "Harvey MacKay" },
            { text: "The only true wisdom is in knowing you know nothing.", author: "Socrates" },
            { text: "The unexamined life is not worth living.", author: "Socrates" },
            { text: "Where there is a will, there is a way.", author: "Unknown" },
            { text: "The power of imagination makes us infinite.", author: "John Muir" },
            { text: "Life is 10% what happens to us and 90% how we react to it.", author: "Charles R. Swindoll" },
            { text: "If you want to live a happy life, tie it to a goal, not to people or things.", author: "Albert Einstein" },
            { text: "Never give up on a dream just because of the time it will take to accomplish it. The time will pass anyway.", author: "Earl Nightingale" },
            { text: "The only thing worse than starting something and failing... is not starting something.", author: "Seth Godin" },
            { text: "The best way to find yourself is to lose yourself in the service of others.", author: "Mahatma Gandhi" },
            { text: "If you are not willing to risk the usual, you will have to settle for the ordinary.", author: "Jim Rohn" },
            { text: "Success is not the key to happiness. Happiness is the key to success. If you love what you are doing, you will be successful.", author: "Albert Schweitzer" },
            { text: "The only impossible journey is the one you never begin.", author: "Tony Robbins" },
            { text: "In three words I can sum up everything I've learned about life: it goes on.", author: "Robert Frost" },
            { text: "The future belongs to those who prepare for it today.", author: "Malcolm X" },
            { text: "It is better to fail in originality than to succeed in imitation.", author: "Herman Melville" },
            { text: "The mind is not a vessel to be filled, but a fire to be kindled.", author: "Plutarch" },
            { text: "Nothing is impossible, the word itself says 'I'm possible'!", author: "Audrey Hepburn" },
            { text: "You are never too old to set another goal or to dream a new dream.", author: "C.S. Lewis" },
            { text: "The biggest risk is not taking any risk. In a world that's changing really quickly, the only strategy that is guaranteed to fail is not taking risks.", author: "Mark Zuckerberg" },
            { text: "Challenges are what make life interesting and overcoming them is what makes life meaningful.", author: "Joshua J. Marine" },
            { text: "The only way to do great work is to love what you do. If you haven't found it yet, keep looking. Don't settle.", author: "Steve Jobs" },
            { text: "The greatest education in the world is watching the masters at work.", author: "Michael Jackson" },
            { text: "The journey of a thousand miles begins with a single step.", author: "Lao Tzu" },
            { text: "Your time is limited, so don't waste it living someone else's life.", author: "Steve Jobs" },
            { text: "Innovation distinguishes between a leader and a follower.", author: "Steve Jobs" }
        ];

        const INSTRUMENTS_AND_LOT_SIZES = [
            { "company": "Nifty Bank", "symbol": "BANKNIFTY", "lotSize": 35 },
            { "company": "Finnifty", "symbol": "FINNIFTY", "lotSize": 65 },
            { "company": "Nifty Midcap Select", "symbol": "MIDCPNIFTY", "lotSize": 140 },
            { "company": "Nifty 50", "symbol": "NIFTY", "lotSize": 75 },
            { "company": "Nifty Next 50", "symbol": "NIFTY NEXT 50", "lotSize": 25 },
            { "company": "360 One WAM", "symbol": "360ONE", "lotSize": 500 },
            { "company": "Aarti Industries", "symbol": "AARTIIND", "lotSize": 1325 },
            { "company": "ABB", "symbol": "ABB", "lotSize": 125 },
            { "company": "Aditya Birla Capital", "symbol": "ABCAPITAL", "lotSize": 3100 },
            { "company": "Aditya Birla Fashion & Retail", "symbol": "ABFRL", "lotSize": 2600 },
            { "company": "ACC", "symbol": "ACC", "lotSize": 300 },
            { "company": "Adani Energy Solutions", "symbol": "ADANIENSOL", "lotSize": 675 },
            { "company": "Adani Enterprises", "symbol": "ADANIENT", "lotSize": 300 },
            { "company": "Adani Green Energy", "symbol": "ADANIGREEN", "lotSize": 600 },
            { "company": "Adani Ports & SEZ", "symbol": "ADANIPORTS", "lotSize": 475 },
            { "company": "Alkem Laboratories", "symbol": "ALKEM", "lotSize": 125 },
            { "company": "Amber Enterprises", "symbol": "AMBER", "lotSize": 100 },
            { "company": "Ambuja Cements", "symbol": "AMBUJACEM", "lotSize": 1050 },
            { "company": "Angel One", "symbol": "ANGELONE", "lotSize": 250 },
            { "company": "APL Apollo Tubes", "symbol": "APLAPOLLO", "lotSize": 350 },
            { "company": "Apollo Hospitals", "symbol": "APOLLOHOSP", "lotSize": 125 },
            { "company": "Ashok Leyland", "symbol": "ASHOKLEY", "lotSize": 5000 },
            { "company": "Asian Paints", "symbol": "ASIANPAINT", "lotSize": 250 },
            { "company": "Astral", "symbol": "ASTRAL", "lotSize": 425 },
            { "company": "Adani Total Gas", "symbol": "ATGL", "lotSize": 875 },
            { "company": "AU Small Finance Bank", "symbol": "AUBANK", "lotSize": 1000 },
            { "company": "Aurobindo Pharma", "symbol": "AUROPHARMA", "lotSize": 550 },
            { "company": "Axis Bank", "symbol": "AXISBANK", "lotSize": 625 },
            { "company": "Bajaj Auto", "symbol": "BAJAJ-AUTO", "lotSize": 75 },
            { "company": "Bajaj Finserv", "symbol": "BAJAJFINSV", "lotSize": 500 },
            { "company": "Bajaj Finance", "symbol": "BAJFINANCE", "lotSize": 750 },
            { "company": "Balkrishna Industries", "symbol": "BALKRISIND", "lotSize": 300 },
            { "company": "Bandhan Bank", "symbol": "BANDHANBNK", "lotSize": 3600 },
            { "company": "Bank of Baroda", "symbol": "BANKBARODA", "lotSize": 2925 },
            { "company": "Bank of India", "symbol": "BANKINDIA", "lotSize": 5200 },
            { "company": "Bharat Dynamics", "symbol": "BDL", "lotSize": 325 },
            { "company": "Bharat Electronics", "symbol": "BEL", "lotSize": 2850 },
            { "company": "Bharat Forge", "symbol": "BHARATFORG", "lotSize": 500 },
            { "company": "Bharti Airtel", "symbol": "BHARTIARTL", "lotSize": 475 },
            { "company": "Bharat Heavy Electricals", "symbol": "BHEL", "lotSize": 2625 },
            { "company": "Biocon", "symbol": "BIOCON", "lotSize": 2500 },
            { "company": "Blue Star", "symbol": "BLUESTARCO", "lotSize": 325 },
            { "company": "Bosch", "symbol": "BOSCHLTD", "lotSize": 25 },
            { "company": "Bharat Petroleum", "symbol": "BPCL", "lotSize": 1975 },
            { "company": "Britannia Industries", "symbol": "BRITANNIA", "lotSize": 125 },
            { "company": "BSE", "symbol": "BSE", "lotSize": 375 },
            { "company": "Birlasoft", "symbol": "BSOFT", "lotSize": 1300 },
            { "company": "Computer Age Management Services", "symbol": "CAMS", "lotSize": 150 },
            { "company": "Canara Bank", "symbol": "CANBK", "lotSize": 6750 },
            { "company": "CDSL", "symbol": "CDSL", "lotSize": 475 },
            { "company": "CESC", "symbol": "CESC", "lotSize": 3625 },
            { "company": "CG Power & Industrial Solutions", "symbol": "CGPOWER", "lotSize": 850 },
            { "company": "Chambal Fertilisers & Chemicals", "symbol": "CHAMBLFERT", "lotSize": 950 },
            { "company": "Cholamandalam Investment", "symbol": "CHOLAFIN", "lotSize": 625 },
            { "company": "Cipla", "symbol": "CIPLA", "lotSize": 375 },
            { "company": "Coal India", "symbol": "COALINDIA", "lotSize": 1350 },
            { "company": "Coforge", "symbol": "COFORGE", "lotSize": 375 },
            { "company": "Colgate Palmolive", "symbol": "COLPAL", "lotSize": 225 },
            { "company": "Container Corporation of India", "symbol": "CONCOR", "lotSize": 1250 },
            { "company": "Crompton Greaves", "symbol": "CROMPTON", "lotSize": 1800 },
            { "company": "Cummins", "symbol": "CUMMINSIND", "lotSize": 200 },
            { "company": "Cyient", "symbol": "CYIENT", "lotSize": 425 },
            { "company": "Dabur", "symbol": "DABUR", "lotSize": 1250 },
            { "company": "Dalmia Bharat", "symbol": "DALBHARAT", "lotSize": 325 },
            { "company": "Delhivery", "symbol": "DELHIVERY", "lotSize": 2075 },
            { "company": "Divis Laboratories", "symbol": "DIVISLAB", "lotSize": 100 },
            { "company": "Dixon Technologies", "symbol": "DIXON", "lotSize": 50 },
            { "company": "DLF", "symbol": "DLF", "lotSize": 825 },
            { "company": "Avenue Supermarts DMart", "symbol": "DMART", "lotSize": 150 },
            { "company": "Dr Reddys Laboratories", "symbol": "DRREDDY", "lotSize": 625 },
            { "company": "Eicher Motors", "symbol": "EICHERMOT", "lotSize": 175 },
            { "company": "Eternal", "symbol": "ETERNAL", "lotSize": 2425 },
            { "company": "Exide Industries", "symbol": "EXIDEIND", "lotSize": 1800 },
            { "company": "Federal Bank", "symbol": "FEDERALBNK", "lotSize": 5000 },
            { "company": "Fortis Healthcare", "symbol": "FORTIS", "lotSize": 775 },
            { "company": "GAIL", "symbol": "GAIL", "lotSize": 3150 },
            { "company": "Glenmark Pharmaceuticals", "symbol": "GLENMARK", "lotSize": 375 },
            { "company": "GMR Airports", "symbol": "GMRAIRPORT", "lotSize": 6975 },
            { "company": "Godrej Consumer Products", "symbol": "GODREJCP", "lotSize": 500 },
            { "company": "Godrej Properties", "symbol": "GODREJPROP", "lotSize": 275 },
            { "company": "Granules", "symbol": "GRANULES", "lotSize": 1075 },
            { "company": "Grasim Industries", "symbol": "GRASIM", "lotSize": 250 },
            { "company": "Hindustan Aeronautics", "symbol": "HAL", "lotSize": 150 },
            { "company": "Havells", "symbol": "HAVELLS", "lotSize": 500 },
            { "company": "HCL Technologies", "symbol": "HCLTECH", "lotSize": 350 },
            { "company": "HDFC AMC", "symbol": "HDFCAMC", "lotSize": 150 },
            { "company": "HDFC Bank", "symbol": "HDFCBANK", "lotSize": 550 },
            { "company": "HDFC Life Insurance", "symbol": "HDFCLIFE", "lotSize": 1100 },
            { "company": "Hero Motocorp", "symbol": "HEROMOTOCO", "lotSize": 150 },
            { "company": "HFCL", "symbol": "HFCL", "lotSize": 6450 },
            { "company": "Hindalco Industries", "symbol": "HINDALCO", "lotSize": 1400 },
            { "company": "Hindustan Copper", "symbol": "HINDCOPPER", "lotSize": 2650 },
            { "company": "Hindustan Petroleum", "symbol": "HINDPETRO", "lotSize": 2025 },
            { "company": "Hindustan Unilever", "symbol": "HINDUNILVR", "lotSize": 300 },
            { "company": "Hindustan Zinc", "symbol": "HINDZINC", "lotSize": 1225 },
            { "company": "HUDCO", "symbol": "HUDCO", "lotSize": 2775 },
            { "company": "ICICI Bank", "symbol": "ICICIBANK", "lotSize": 700 },
            { "company": "ICICI Lombard General Insurance", "symbol": "ICICIGI", "lotSize": 325 },
            { "company": "ICICI Prudential Life Insurance", "symbol": "ICICIPRULI", "lotSize": 925 },
            { "company": "Vodafone Idea", "symbol": "IDEA", "lotSize": 71475 },
            { "company": "IDFC First Bank", "symbol": "IDFCFIRSTB", "lotSize": 9275 },
            { "company": "Indian Energy Exchange", "symbol": "IEX", "lotSize": 3750 },
            { "company": "Indraprastha Gas", "symbol": "IGL", "lotSize": 2750 },
            { "company": "IIFL Finance", "symbol": "IIFL", "lotSize": 1650 },
            { "company": "Indian Hotels Company", "symbol": "INDHOTEL", "lotSize": 1000 },
            { "company": "Indian Bank", "symbol": "INDIANB", "lotSize": 1000 },
            { "company": "Interglobe Aviation", "symbol": "INDIGO", "lotSize": 150 },
            { "company": "Indusind Bank", "symbol": "INDUSINDBK", "lotSize": 700 },
            { "company": "Indus Towers", "symbol": "INDUSTOWER", "lotSize": 1700 },
            { "company": "Infosys", "symbol": "INFY", "lotSize": 400 },
            { "company": "Inox Wind", "symbol": "INOXWIND", "lotSize": 3225 },
            { "company": "Indian Oil Corporation", "symbol": "IOC", "lotSize": 4875 },
            { "company": "IRB Infrastructure Developers", "symbol": "IRB", "lotSize": 11675 },
            { "company": "IRCTC", "symbol": "IRCTC", "lotSize": 875 },
            { "company": "IREDA", "symbol": "IREDA", "lotSize": 3450 },
            { "company": "IRFC", "symbol": "IRFC", "lotSize": 4250 },
            { "company": "ITC", "symbol": "ITC", "lotSize": 1600 },
            { "company": "Jindal Steel", "symbol": "JINDALSTEL", "lotSize": 625 },
            { "company": "Jio Financial Services", "symbol": "JIOFIN", "lotSize": 2350 },
            { "company": "Jindal Stainless", "symbol": "JSL", "lotSize": 850 },
            { "company": "JSW Energy", "symbol": "JSWENERGY", "lotSize": 1000 },
            { "company": "JSW Steel", "symbol": "JSWSTEEL", "lotSize": 675 },
            { "company": "Jubilant FoodWorks", "symbol": "JUBLFOOD", "lotSize": 1250 },
            { "company": "Kalyan Jewellers", "symbol": "KALYANKJIL", "lotSize": 1175 },
            { "company": "Kaynes Technology", "symbol": "KAYNES", "lotSize": 100 },
            { "company": "KEI Industries", "symbol": "KEI", "lotSize": 175 },
            { "company": "KFin Technologies", "symbol": "KFINTECH", "lotSize": 450 },
            { "company": "Kotak Bank", "symbol": "KOTAKBANK", "lotSize": 400 },
            { "company": "KPIT Technologies", "symbol": "KPITTECH", "lotSize": 400 },
            { "company": "Laurus Labs", "symbol": "LAURUSLABS", "lotSize": 1700 },
            { "company": "LIC Housing Finance", "symbol": "LICHSGFIN", "lotSize": 1000 },
            { "company": "LIC of India", "symbol": "LICI", "lotSize": 700 },
            { "company": "Lodha Developers", "symbol": "LODHA", "lotSize": 450 },
            { "company": "Larsen & Toubro", "symbol": "LT", "lotSize": 175 },
            { "company": "L&T Finance", "symbol": "LTF", "lotSize": 4462 },
            { "company": "LTI Mindtree", "symbol": "LTIM", "lotSize": 150 },
            { "company": "Lupin", "symbol": "LUPIN", "lotSize": 425 },
            { "company": "Mahindra & Mahindra", "symbol": "M&M", "lotSize": 200 },
            { "company": "M&M Financial Services", "symbol": "M&MFIN", "lotSize": 2056 },
            { "company": "Manappuram Finance", "symbol": "MANAPPURAM", "lotSize": 3000 },
            { "company": "Mankind Pharma", "symbol": "MANKIND", "lotSize": 225 },
            { "company": "Marico", "symbol": "MARICO", "lotSize": 1200 },
            { "company": "Maruti Suzuki", "symbol": "MARUTI", "lotSize": 50 },
            { "company": "Max Healthcare Institute", "symbol": "MAXHEALTH", "lotSize": 525 },
            { "company": "Mazagon Dock Shipbuilders", "symbol": "MAZDOCK", "lotSize": 175 },
            { "company": "MCX", "symbol": "MCX", "lotSize": 125 },
            { "company": "Max Financial Services", "symbol": "MFSL", "lotSize": 800 },
            { "company": "Mahanagar Gas", "symbol": "MGL", "lotSize": 400 },
            { "company": "Samvardhana Motherson International", "symbol": "MOTHERSON", "lotSize": 6150 },
            { "company": "Mphasis", "symbol": "MPHASIS", "lotSize": 275 },
            { "company": "Muthoot Finance", "symbol": "MUTHOOTFIN", "lotSize": 275 },
            { "company": "NALCO", "symbol": "NATIONALUM", "lotSize": 3750 },
            { "company": "Info Edge", "symbol": "NAUKRI", "lotSize": 375 },
            { "company": "NBCC", "symbol": "NBCC", "lotSize": 6500 },
            { "company": "NCC", "symbol": "NCC", "lotSize": 2700 },
            { "company": "Nestle", "symbol": "NESTLEIND", "lotSize": 250 },
            { "company": "NHPC", "symbol": "NHPC", "lotSize": 6400 },
            { "company": "NMDC", "symbol": "NMDC", "lotSize": 13500 },
            { "company": "NTPC", "symbol": "NTPC", "lotSize": 1500 },
            { "company": "Nykaa", "symbol": "NYKAA", "lotSize": 3125 },
            { "company": "Oberoi Realty", "symbol": "OBEROIRLTY", "lotSize": 350 },
            { "company": "Oracle Financial Services Software", "symbol": "OFSS", "lotSize": 75 },
            { "company": "Oil India", "symbol": "OIL", "lotSize": 1400 },
            { "company": "Oil & Natural Gas Corporation", "symbol": "ONGC", "lotSize": 2250 },
            { "company": "Page Industries", "symbol": "PAGEIND", "lotSize": 15 },
            { "company": "Patanjali Foods", "symbol": "PATANJALI", "lotSize": 300 },
            { "company": "One 97 Communications", "symbol": "PAYTM", "lotSize": 725 },
            { "company": "Piramal Enterprises", "symbol": "PEL", "lotSize": 750 },
            { "company": "Persistent Systems", "symbol": "PERSISTENT", "lotSize": 100 },
            { "company": "Petronet LNG", "symbol": "PETRONET", "lotSize": 1800 },
            { "company": "Power Finance Corporation", "symbol": "PFC", "lotSize": 1300 },
            { "company": "PG Electroplast", "symbol": "PGEL", "lotSize": 700 },
            { "company": "Phoenix Mills", "symbol": "PHOENIXLTD", "lotSize": 350 },
            { "company": "Pidilite Industries", "symbol": "PIDILITIND", "lotSize": 250 },
            { "company": "PI Industries", "symbol": "PIIND", "lotSize": 175 },
            { "company": "Punjab National Bank", "symbol": "PNB", "lotSize": 8000 },
            { "company": "PNB Housing Finance", "symbol": "PNBHOUSING", "lotSize": 650 },
            { "company": "PB FinTech", "symbol": "POLICYBZR", "lotSize": 350 },
            { "company": "Polycab", "symbol": "POLYCAB", "lotSize": 125 },
            { "company": "Poonawalla Fincorp", "symbol": "POONAWALLA", "lotSize": 1700 },
            { "company": "Power Grid Corporation of India", "symbol": "POWERGRID", "lotSize": 1900 },
            { "company": "Piramal Pharma", "symbol": "PPLPHARMA", "lotSize": 2500 },
            { "company": "Prestige Estates Projects", "symbol": "PRESTIGE", "lotSize": 450 },
            { "company": "RBL Bank", "symbol": "RBLBANK", "lotSize": 3175 },
            { "company": "REC", "symbol": "RECLTD", "lotSize": 1275 },
            { "company": "Reliance Industries", "symbol": "RELIANCE", "lotSize": 500 },
            { "company": "Rail Vikas Nigam", "symbol": "RVNL", "lotSize": 1375 },
            { "company": "Steel Authority of India", "symbol": "SAIL", "lotSize": 4700 },
            { "company": "SBI Cards", "symbol": "SBICARD", "lotSize": 800 },
            { "company": "SBI Life Insurance", "symbol": "SBILIFE", "lotSize": 375 },
            { "company": "State Bank of India", "symbol": "SBIN", "lotSize": 750 },
            { "company": "Shree Cement", "symbol": "SHREECEM", "lotSize": 25 },
            { "company": "Shriram Finance", "symbol": "SHRIRAMFIN", "lotSize": 825 },
            { "company": "Siemens", "symbol": "SIEMENS", "lotSize": 125 },
            { "company": "SJVN", "symbol": "SJVN", "lotSize": 5875 },
            { "company": "Solar Industries", "symbol": "SOLARINDS", "lotSize": 75 },
            { "company": "Sona BLW Precision Forgings", "symbol": "SONACOMS", "lotSize": 1050 },
            { "company": "SRF", "symbol": "SRF", "lotSize": 200 },
            { "company": "Sun Pharmaceutical", "symbol": "SUNPHARMA", "lotSize": 350 },
            { "company": "Supreme Industries", "symbol": "SUPREMEIND", "lotSize": 175 },
            { "company": "Syngene International", "symbol": "SYNGENE", "lotSize": 1000 },
            { "company": "Tata Chemicals", "symbol": "TATACHEM", "lotSize": 650 },
            { "company": "Tata Communications", "symbol": "TATACOMM", "lotSize": 350 },
            { "company": "Tata Consumer Products", "symbol": "TATACONSUM", "lotSize": 550 },
            { "company": "Tata Elxsi", "symbol": "TATAELXSI", "lotSize": 100 },
            { "company": "Tata Motors", "symbol": "TATAMOTORS", "lotSize": 800 },
            { "company": "Tata Power", "symbol": "TATAPOWER", "lotSize": 1450 },
            { "company": "Tata Steel", "symbol": "TATASTEEL", "lotSize": 5500 },
            { "company": "Tata Technologies", "symbol": "TATATECH", "lotSize": 800 },
            { "company": "Tata Consultancy Services", "symbol": "TCS", "lotSize": 175 },
            { "company": "Tech Mahindra", "symbol": "TECHM", "lotSize": 600 },
            { "company": "Tube Investment", "symbol": "TIINDIA", "lotSize": 200 },
            { "company": "Titagarh Rail Systems", "symbol": "TITAGARH", "lotSize": 725 },
            { "company": "Titan", "symbol": "TITAN", "lotSize": 175 },
            { "company": "Torrent Pharmaceuticals", "symbol": "TORNTPHARM", "lotSize": 250 },
            { "company": "Torrent Power", "symbol": "TORNTPOWER", "lotSize": 375 },
            { "company": "Trent", "symbol": "TRENT", "lotSize": 100 },
            { "company": "TVS Motors", "symbol": "TVSMOTOR", "lotSize": 350 },
            { "company": "UltraTech Cement", "symbol": "ULTRACEMCO", "lotSize": 50 },
            { "company": "Union Bank of India", "symbol": "UNIONBANK", "lotSize": 4425 },
            { "company": "United Spirits", "symbol": "UNITDSPR", "lotSize": 400 },
            { "company": "UNO Minda", "symbol": "UNOMINDA", "lotSize": 550 },
            { "company": "UPL", "symbol": "UPL", "lotSize": 1355 },
            { "company": "Varun Beverages", "symbol": "VBL", "lotSize": 1025 },
            { "company": "Vedanta", "symbol": "VEDL", "lotSize": 1150 },
            { "company": "Voltas", "symbol": "VOLTAS", "lotSize": 375 },
            { "company": "Wipro", "symbol": "WIPRO", "lotSize": 3000 },
            { "company": "Yes Bank", "symbol": "YESBANK", "lotSize": 31100 },
            { "company": "Zydus Life Science", "symbol": "ZYDUSLIFE", "lotSize": 900 }
        ];

        const STRATEGIES = [
            "Breakout Trading", "Scalping", "Momentum Trading", "Swing Trading",
            "Positional Trading", "Arbitrage", "Value Investing", "Option Selling",
            "Option Buying (Directional)", "Intraday Trading", "F&O Hedging"
        ];

        // Emotion data with associated emojis
        const EMOTIONS = [
            { name: "Confident", emoji: "😎" },
            { name: "Anxious", emoji: "😟" },
            { name: "Greedy", emoji: "🤑" },
            { name: "Fearful", emoji: "😨" },
            { name: "Disciplined", emoji: "🤖" },
            { name: "Impatient", emoji: "😤" },
            { name: "Patient", emoji: "😌" },
            { name: "Frustrated", emoji: "😡" },
            { name: "Excited", emoji: "🤩" },
            { name: "Calm", emoji: "🧘" },
            { name: "Overconfident", emoji: "😬" }
        ];

        const instrumentTypes = [
            "Cash", "Futures", "Options-CE", "Options-PE"
        ];

        const tradeResults = [
            "Win", "Loss", "Breakeven"
        ];

        let allTrades = []; // Cache all trades globally
        let allReflections = []; // Cache all reflections globally

        // Track current month and year for calendar
        let currentCalendarDate = new Date();


        // --- F&O Specific Data and Variables (from index (1).html) ---
        // This data is now part of the global scope, but I'll keep it here for clarity
        // that it's specifically for the F&O section's functionality.
        const fnoStocksData = {
            "AUTO": ["APOLLOTYRE", "ASHOKLEY", "BAJAJ-AUTO", "BALKRISIND", "BHARATFORG", "BOSCHLTD", "EICHERMOT", "EXIDEIND", "HEROMOTOCO", "M&M", "MARUTI", "MOTHERSON", "SONACOMS", "TATAMOTORS", "TIINDIA", "TVSMOTOR", "UNOMINDA"],
            "BANK": ["AXISBANK", "HDFCBANK", "ICICIBANK", "INDUSINDBK", "KOTAKBANK", "SBIN", "AUBANK", "FEDERALBNK", "IDFCFIRSTB", "RBLBANK", "YESBANK", "BANDHANBNK", "BANKBARODA", "BANKINDIA", "CANBK", "INDIANB", "PNB", "UNIONBANK"],
            "CEMENT": ["ACC", "AMBUJACEM", "DALBHARAT", "GRASIM", "SHREECEM", "ULTRACEMCO"],
            "CONSUMER DURABLES": ["AMBER", "BLUESTARCO", "CROMPTON", "DIXON", "HAVELLS", "KALYANKJIL", "PGEL", "POLYCAB", "TITAN", "VOLTAS"],
            "CONSUMPTION": ["APOLLOHOSP", "ASIANPAINT", "BAJAJ-AUTO", "BHARTIARTL", "BRITANNIA", "COLPAL", "DABUR", "DLF", "DMART", "EICHERMOT", "ETERNAL", "GODREJCP", "HAVELLS", "HEROMOTOCO", "HINDUNILVR", "INDIGO", "INDHOTEL", "ITC", "M&M", "MARICO", "MARUTI", "MAXHEALTH", "NAUKRI", "NESTLEIND", "PATANJALI", "TATACONSUM", "TATAPOWER", "TITAN", "TVSMOTOR", "UNITDSPR", "VBL"],
            "ENERGY": ["ABB", "ADANIENSOL", "ADANIGREEN", "ATGL", "BHEL", "BPCL", "CESC", "CGPOWER", "GAIL", "HINDPETRO", "IGL", "IOC", "JSWENERGY", "MGL", "NHPC", "NTPC", "OIL", "ONGC", "PETRONET", "POWERGRID", "RELIANCE", "SIEMENS", "SJVN", "SOLARINDS", "TATAPOWER", "TORNTPOWER"],
            "FINANCIAL SERVICES": ["360ONE", "ABCAPITAL", "ANGELONE", "BAJAJFINSV", "BAJFINANCE", "CAMS", "CHOLAFIN", "HDFCAMC", "HDFCLIFE", "ICICIGI", "ICICIPRULI", "IIFL", "JIOFIN", "KFINTECH", "LICHSGFIN", "LICI", "LTF", "M&MFIN", "MANAPPURAM", "MCX", "MFSL", "MUTHOOTFIN", "PAYTM", "PEL", "PFC", "PNBHOUSING", "POLICYBZR", "POONAWALLA", "RECLTD", "SBICARD", "SBILIFE", "SHRIRAMFIN"],
            "FMCG": ["BRITANNIA", "COLPAL", "DABUR", "GODREJCP", "HINDUNILVR", "ITC", "JUBLFOOD", "MARICO", "NESTLEIND", "PATANJALI", "TATACONSUM", "TTKPRESTIG", "VBL"],
            "HEALTHCARE": ["ALKEM", "APOLLOHOSP", "AUROPHARMA", "BIOCON", "CIPLA", "DIVISLAB", "DRREDDY", "FORTIS", "GLENMARK", "GRANULES", "LAURUSLABS", "LUPIN", "MANKIND", "MAXHEALTH", "PPLPHARMA", "SUNPHARMA", "SYNGENE", "ZYDUSLIFE"],
            "IT": ["BSOFT", "COFORGE", "CYIENT", "HCLTECH", "INFY", "KPITTECH", "LTIM", "MPHASIS", "NAUKRI", "OFSS", "PERSISTENT", "TATAELXSI", "TCS", "TECHM", "WIPRO"],
            "MEDIA": ["DBCORP", "DISHTV", "HATHWAY", "NAZARA", "NETWORK18", "PVRINOX", "SAREGAMA", "SUNTV", "TIPSMUSIC", "ZEEL"],
            "METAL": ["ADANIENT", "APLAPOLLO", "HINDALCO", "HINDCOPPER", "HINDZINC", "JINDALSTEL", "JSL", "JSWSTEEL", "NATIONALUM", "NMDC", "SAIL", "TATASTEEL", "VEDL"],
            "MIDCAP SELECT": ["AMBER", "APLAPOLLO", "BDL", "BHEL", "BLUESTARCO", "CUMMINSIND", "DELHIVERY", "DMART", "HAL", "INDHOTEL", "INOXWIND", "IRCTC", "IREDA", "MAZDOCK", "NBCC", "NCC", "PVRINOX", "TCIEXP", "CONCOR", "ESCORTS", "IEX", "CDSL", "ETERNAL", "RAMCOCEM", "JKCEMENT", "PRESTIGE", "HINDUPETRO"],
            "OIL & GAS": ["ATGL", "BPCL", "GAIL", "HINDPETRO", "IGL", "IOC", "MGL", "OIL", "ONGC", "PETRONET", "RELIANCE"],
            "PHARMA": ["ALKEM", "AUROPHARMA", "BIOCON", "CIPLA", "DIVISLAB", "DRREDDY", "GLENMARK", "GRANULES", "LAURUSLABS", "LUPIN", "MANKIND", "MAXHEALTH", "PPLPHARMA", "SUNPHARMA", "TORNTPHARM", "ZYDUSLIFE"],
            "PRIVATE BANK": ["AUBANK", "AXISBANK", "FEDERALBNK", "HDFCBANK", "ICICIBANK", "INDUSINDBK", "KOTAKBANK", "RBLBANK", "YESBANK"],
            "PSU BANK": ["BANDHANBNK", "BANKBARODA", "BANKINDIA", "CANBK", "INDIANB", "PNB", "SBIN", "UNIONBANK"],
            "REALTY": ["DLF", "GODREJPROP", "LODHA", "OBEROIRLTY", "PHOENIXLTD", "PRESTIGE"],
            "SENSEX": ["RELIANCE", "HDFCBANK", "ICICIBANK", "INFY", "TCS", "LT", "ITC", "HINDUNILVR", "MARUTI", "KOTAKBANK", "AXISBANK", "SBIN", "TITAN", "SUNPHARMA", "DRREDDY", "ASIANPAINT", "ULTRACEMCO", "M&M", "NESTLEIND", "BAJFINANCE", "BHARTIARTL", "POWERGRID", "NTPC", "INDUSINDBK", "HCLTECH"],
            "midSELECT 50": ["ADANIPORTS", "AMBUJACEM", "APOLLOHOSP", "BAJAJ-AUTO", "BEL", "BHEL", "BPCL", "BRITANNIA", "CHOLAFIN", "COALINDIA", "CONCOR", "DABUR", "DMART", "EICHERMOT", "GAIL", "GODREJCP", "HAL", "INDHOTEL", "INOXWIND", "IRCTC", "IREDA", "MAZDOCK", "NBCC", "NCC", "PVRINOX", "TCIEXP", "CONCOR", "ESCORTS", "IEX", "CDSL", "ETERNAL", "RAMCOCEM", "JKCEMENT", "PRESTIGE", "HINDUPETRO"],
            "NIFTY INFRA": ["ADANIGREEN", "ADANIPORTS", "AMBUJACEM", "ASHOKLEY", "BHARATFORG", "BHARTIARTL", "BPCL", "CGPOWER", "CUMMINSIND", "DLF", "GODREJPROP", "GRASIM", "HINDPETRO", "IOC", "LT", "MOTHERSON", "NTPC", "ONGC", "POWERGRID", "RELIANCE", "SHREECEM", "SIEMENS", "TATAPOWER", "ULTRACEMCO"],
            "NIFTY MEDIA": ["DBCORP", "DISHTV", "HATHWAY", "NAZARA", "NETWORK18", "PVRINOX", "SAREGAMA", "SUNTV", "TIPSMUSIC", "ZEEL"],
            "NIFTY MIDCAP 50": ["AUBANK", "ALKEM", "AMBER", "ARE&M", "ASTERDM", "AUROPHARMA", "BAJAJHLDNG", "BHEL", "CANBK", "CHOLAFIN", "COFORGE", "CUMMINSIND", "DIXON", "DMART", "FEDERALBNK", "GODREJPROP", "HAL", "HAVELLS", "HDFCAMC", "ICICIPRULI", "INDHOTEL", "INDIGO", "INOXWIND", "JSWENERGY", "LODHA", "MAXHEALTH", "MOTHERSON", "MUTHOOTFIN", "NAUKRI", "OBEROIRLTY", "PERSISTENT", "PIDILITIND", "POLYCAB", "PRESTIGE", "PVRINOX", "RECLTD", "SAIL", "SBICARD", "SIEMENS", "SUNPHARMA", "TATAPOWER", "TVSMOTOR", "VEDL", "ZYDUSLIFE"],
            "NIFTY NEXT 50": ["ABB", "ADANIGREEN", "ADANIPOWER", "ADANIPORTS", "AMBUJACEM", "APOLLOHOSP", "BAJAJHLDNG", "BANKBARODA", "BPCL", "BRITANNIA", "CANBK", "CGPOWER", "DABUR", "DIVISLAB", "DLF", "DMART", "GAIL", "GODREJCP", "HAL", "HAVELLS", "HDFCAMC", "ICICIGI", "ICICIPRULI", "IOC", "INDHOTEL", "INDIGO", "JSWENERGY", "LICI", "LODHA", "LTIM", "MOTHERSON", "NAUKRI", "NESTLEIND", "ONGC", "PFC", "PIDILITIND", "PNB", "RECLTD", "SHREECEM", "SIEMENS", "TATAPOWER", "TORNTPHARM", "TVSMOTOR", "VEDL", "ZYDUSLIFE"],
            "NIFTY SMALLCAP 50": ["AARTIIND", "ABREL", "AEGISLOG", "ARE&M", "ASTERDM", "BSOFT", "CASTROLIND", "CESC", "CYIENT", "FSL", "HSCL", "HFCL", "IEX", "INOXWIND", "KAYNES", "KEC", "LALPATHLAB", "LAURUSLABS", "NAVINFLUOR", "NEULANDLAB", "NCC", "PPLPHARMA", "RKFORGE", "TEJASNET"]
        };

        const marketWeightages = {
            "FINANCIAL SERVICES": "35.0%",
            "IT": "15.0%",
            "OIL & GAS": "12.0%",
            "FMCG": "9.0%",
            "AUTO": "6.0%",
            "PHARMA": "5.0%",
            "METAL": "4.0%",
            "ENERGY": "3.5%",
            "CEMENT": "2.5%",
            "CONSUMER DURABLES": "2.0%",
            "HEALTHCARE": "2.0%",
            "CAPITAL GOODS": "2.0%",
            "TELECOMMUNICATION": "1.5%",
            "REALTY": "1.0%",
            "MEDIA": "0.5%",
        };

        // F&O specific DOM elements (will be dynamically created/accessed within renderFnoSectors)
        let fnoSectorGridDiv;
        let fnoTickerListDiv;
        let fnoBackButton;
        let fnoSectorNameTitle;
        let fnoTickersContainer;
        let fnoTradingviewChartContainer;
        let fnoScanModeToggle;
        let fnoScanModeOptions;
        let fnoScanModePopupBtn;
        let fnoScanModeNewTabBtn;
        let fnoTickerSearch;
        let fnoSearchResultsDiv;
        let fnoRandomTickerDisplay;
        let fnoSectorSortSelect;
        let fnoMarketWeightageList;

        let scanModeActive = false;
        let scanModePopup = null;
        let scanModeChartPreference = localStorage.getItem('scanModeChartPreference') || 'popup';
        let currentActiveSuggestion = -1; // For arrow key navigation in search results for F&O


        // --- Utility Functions ---

        /**
         * Displays a custom modal message.
         * @param {string} title - The title of the message.
         * @param {string} message - The content of the message.
         * @returns {Promise<void>} A promise that resolves when the user clicks OK.
         */
        function showMessage(title, message) {
            const modal = document.getElementById('message-modal');
            const modalTitle = document.getElementById('message-title');
            const modalText = document.getElementById('message-text');
            const closeButton = document.getElementById('message-close-button');
            const okButton = document.getElementById('message-ok-button');

            modalTitle.textContent = title;
            modalText.textContent = message;
            modal.style.display = 'flex'; // Show the modal

            return new Promise((resolve) => {
                const closeHandler = () => {
                    modal.style.display = 'none';
                    closeButton.removeEventListener('click', closeHandler);
                    okButton.removeEventListener('click', closeHandler);
                    resolve();
                };
                closeButton.addEventListener('click', closeHandler);
                okButton.addEventListener('click', closeHandler);
            });
        }

        /**
         * Formats a number to Indian Rupee currency.
         * @param {number} amount - The amount to format.
         * @returns {string} The formatted currency string.
         */
        function formatRupee(amount) {
            if (typeof amount !== 'number' && typeof amount !== 'string') return '';
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(Number(amount));
        }

        /**
         * Calculates the percentage change.
         * @param {number} startValue - The initial value.
         * @param {number} endValue - The final value.
         * @returns {string} The percentage change formatted.
         */
        function calculatePercentageChange(startValue, endValue) {
            if (startValue === 0) return 'N/A';
            const change = ((endValue - startValue) / startValue) * 100;
            return `${change.toFixed(2)}%`;
        }

        /**
         * Destroys all Chart.js instances.
         * Prevents issues when re-rendering charts.
         */
        function destroyAllCharts() {
            Chart.helpers.each(Chart.instances, function(instance) {
                instance.destroy();
            });
        }

        /**
         * Calculates brokerage and taxes for a given trade.
         * This function is for internal calculation and not displayed on UI as requested.
         * @param {string} tradeType - 'equity_delivery', 'equity_intraday', 'futures', 'options'.
         * @param {number} buyPrice - Buy price per unit.
         * @param {number} sellPrice - Sell price per unit.
         * @param {number} quantity - Number of units/lots.
         * @param {number} [lotSize=1] - Lot size for F&O.
         * @returns {object} Object containing calculated charges.
         */
        function calculateBrokerageAndTaxes(tradeType, buyPrice, sellPrice, quantity, lotSize = 1) {
            let brokerage = 0;
            let stt = 0; // Securities Transaction Tax
            let transactionCharges = 0; // Exchange Transaction Charges
            let stampDuty = 0;
            let sebiCharges = 0; // SEBI Turnover Fees
            let gst = 0; // Goods and Services Tax

            const buyValue = buyPrice * quantity * lotSize;
            const sellValue = sellPrice * quantity * lotSize;

            switch (tradeType) {
                case 'equity_delivery':
                    brokerage = 0; // Zero brokerage
                    stt = sellValue * 0.001; // 0.1% on sell side
                    transactionCharges = buyValue * 0.0000297 + sellValue * 0.0000297; // NSE charges
                    stampDuty = buyValue * 0.00015; // 0.015% on buy side
                    sebiCharges = 0.000001 * (buyValue + sellValue); // 0.0001% of turnover
                    gst = 0.18 * (brokerage + transactionCharges + sebiCharges);
                    break;
                case 'equity_intraday':
                    const brokerageRateIntraday = 0.0003; // 0.03%
                    brokerage = Math.min(buyValue * brokerageRateIntraday, 20) + Math.min(sellValue * brokerageRateIntraday, 20);
                    stt = sellValue * 0.000025; // 0.025% on sell side
                    transactionCharges = buyValue * 0.0000297 + sellValue * 0.0000297; // NSE charges
                    stampDuty = buyValue * 0.00003; // 0.003% on buy side
                    sebiCharges = 0.000001 * (buyValue + sellValue); // 0.0001% of turnover
                    gst = 0.18 * (brokerage + transactionCharges + sebiCharges);
                    break;
                case 'futures':
                    const brokerageRateFutures = 0.00002; // 0.0002% of turnover
                    brokerage = Math.min(buyValue * brokerageRateFutures, 20) + Math.min(sellValue * brokerageRateFutures, 20);
                    stt = sellValue * 0.00001; // 0.01% on sell side
                    transactionCharges = buyValue * 0.0000018 + sellValue * 0.0000018; // NSE futures charges (0.0018%)
                    stampDuty = buyValue * 0.000002; // 0.0002% on buy side
                    sebiCharges = 0.0000005 * (buyValue + sellValue); // 0.00005% of turnover
                    gst = 0.18 * (brokerage + transactionCharges + sebiCharges);
                    break;
                case 'options':
                    brokerage = 20 * 2; // Flat ₹20 per order for buy and sell
                    stt = sellValue * 0.0005; // 0.05% on sell side (on premium value)
                    transactionCharges = (buyValue + sellValue) * 0.000053; // NSE options charges (0.053%)
                    stampDuty = buyValue * 0.000003; // 0.0003% on buy side
                    sebiCharges = 0.00000001 * (buyValue + sellValue); // 0.000001% of turnover
                    gst = 0.18 * (brokerage + transactionCharges + sebiCharges);
                    break;
            }

            const totalCharges = brokerage + stt + transactionCharges + stampDuty + sebiCharges + gst;

            return {
                brokerage: brokerage,
                stt: stt,
                transactionCharges: transactionCharges,
                stampDuty: stampDuty,
                sebiCharges: sebiCharges,
                gst: gst,
                totalCharges: totalCharges
            };
        }


        // --- IndexedDB Functions ---

        /**
         * Initializes the IndexedDB database.
         * Creates the 'trades' and 'reflections' object stores if they don't exist.
         * @returns {Promise<IDBDatabase>} A promise that resolves with the database instance.
         */
        function openDB() {
            return new Promise((resolve, reject) => {
                const request = indexedDB.open(DB_NAME, DB_VERSION);

                request.onupgradeneeded = (event) => {
                    db = event.target.result;
                    if (!db.objectStoreNames.contains(STORE_TRADES)) {
                        const tradeStore = db.createObjectStore(STORE_TRADES, { keyPath: 'id', autoIncrement: true });
                        tradeStore.createIndex('date', 'entryDate', { unique: false });
                        tradeStore.createIndex('instrument', 'instrument', { unique: false });
                        tradeStore.createIndex('strategy', 'strategyUsed', { unique: false });
                        tradeStore.createIndex('result', 'result', { unique: false });
                        tradeStore.createIndex('entryExitDate', ['entryDate', 'exitDate'], { unique: false });
                    }
                    if (!db.objectStoreNames.contains(STORE_REFLECTIONS)) {
                        const reflectionStore = db.createObjectStore(STORE_REFLECTIONS, { keyPath: 'id', autoIncrement: true });
                        reflectionStore.createIndex('date', 'date', { unique: false });
                    }
                };

                request.onsuccess = (event) => {
                    db = event.target.result;
                    resolve(db);
                };

                request.onerror = (event) => {
                    console.error("IndexedDB error:", event.target.errorCode);
                    showMessage("Error", "Failed to open database. Please try again.");
                    reject(event.target.error);
                };
            });
        }

        /**
         * Adds a new entry to a specified IndexedDB store.
         * @param {string} storeName - The name of the object store (e.g., STORE_TRADES, STORE_REFLECTIONS).
         * @param {Object} data - The object to add.
         * @returns {Promise<void>} A promise that resolves when the data is added.
         */
        function addEntry(storeName, data) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                const request = objectStore.add(data);

                request.onsuccess = () => {
                    resolve();
                };

                request.onerror = (event) => {
                    console.error(`Error adding entry to ${storeName}:`, event.target.error);
                    reject(event.target.error);
                };
            });
        }

        /**
         * Updates an existing entry in a specified IndexedDB store.
         * @param {string} storeName - The name of the object store.
         * @param {Object} data - The object to update (must contain keyPath).
         * @returns {Promise<void>} A promise that resolves when the data is updated.
         */
        function updateEntry(storeName, data) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                const request = objectStore.put(data); // `put` updates if exists, adds if not

                request.onsuccess = () => {
                    resolve();
                };

                request.onerror = (event) => {
                    console.error(`Error updating entry in ${storeName}:`, event.target.error);
                    reject(event.target.error);
                };
            });
        }


        /**
         * Retrieves all entries from a specified IndexedDB store.
         * @param {string} storeName - The name of the object store.
         * @returns {Promise<Array<Object>>} A promise that resolves with an array of objects.
         */
        async function getEntries(storeName) {
            return new Promise((resolve, reject) => {
                if (!db) {
                    console.error("Database not open.");
                    return reject(new Error("Database not open."));
                }
                const transaction = db.transaction([storeName], 'readonly');
                const objectStore = transaction.objectStore(storeName);
                const request = objectStore.getAll();

                request.onsuccess = (event) => {
                    resolve(event.target.result);
                };

                request.onerror = (event) => {
                    console.error(`Error getting entries from ${storeName}:`, event.target.error);
                    reject(event.target.error);
                };
            });
        }

        /**
         * Deletes an entry from a specified IndexedDB store by ID.
         * @param {string} storeName - The name of the object store.
         * @param {number} id - The ID of the entry to delete.
         * @returns {Promise<void>} A promise that resolves when the entry is deleted.
         */
        function deleteEntry(storeName, id) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                const request = objectStore.delete(id);

                request.onsuccess = () => {
                    resolve();
                };

                request.onerror = (event) => {
                    console.error(`Error deleting entry from ${storeName}:`, event.target.error);
                    reject(event.target.error);
                };
            });
        }

        /**
         * Clears all data from a specified IndexedDB store.
         * @param {string} storeName - The name of the object store.
         * @returns {Promise<void>} A promise that resolves when the store is cleared.
         */
        function clearStore(storeName) {
            return new Promise((resolve, reject) => {
                const transaction = db.transaction([storeName], 'readwrite');
                const objectStore = transaction.objectStore(storeName);
                const request = objectStore.clear();

                request.onsuccess = () => {
                    resolve();
                };

                request.onerror = (event) => {
                    console.error(`Error clearing store ${storeName}:`, event.target.error);
                    reject(event.target.error);
                };
            });
        }


        // --- UI Rendering Functions ---

        /**
         * Renders the Add Trade form with improved UI.
         * @param {Object} [tradeToEdit=null] - Optional trade object to pre-fill the form for editing.
         */
        function renderAddTradeForm(tradeToEdit = null) {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">${tradeToEdit ? 'Edit Trade Entry' : 'Add New Trade Entry'}</h2>
                    <form id="trade-entry-form" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        ${tradeToEdit ? `<input type="hidden" id="trade-id" name="id" value="${tradeToEdit.id}">` : ''}

                        <div class="form-section col-span-full">
                            <h3 class="form-section-title flex items-center"><i data-lucide="info" class="mr-2"></i> Trade Details</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="col-span-full input-group relative">
                                    <i data-lucide="building-2" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="text" id="instrument" name="instrument" placeholder="Instrument (e.g., Nifty Bank, Reliance)" required>
                                    <div id="autocomplete-suggestions" class="autocomplete-suggestions"></div>
                                </div>
                                <div class="input-group">
                                     <i data-lucide="clipboard-type" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <select id="type" name="type" required></select>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="flag" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <select id="strategy" name="strategy" required></select>
                                </div>
                            </div>
                        </div>

                        <div class="form-section col-span-full">
                            <h3 class="form-section-title flex items-center"><i data-lucide="clock" class="mr-2"></i> Entry & Exit Timings</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="input-group">
                                    <i data-lucide="calendar" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="date" id="entry-date" name="entryDate" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="clock" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="time" id="entry-time" name="entryTime" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="calendar" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="date" id="exit-date" name="exitDate" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="clock" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="time" id="exit-time" name="exitTime" required>
                                </div>
                            </div>
                        </div>

                        <div class="form-section col-span-full">
                            <h3 class="form-section-title flex items-center"><i data-lucide="trending-up" class="mr-2"></i> Price & Quantity</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="input-group">
                                    <i data-lucide="indian-rupee" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="number" id="entry-price" name="entryPrice" step="0.01" placeholder="Entry Price" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="indian-rupee" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="number" id="exit-price" name="exitPrice" step="0.01" placeholder="Exit Price" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="hash" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="number" id="quantity" name="quantity" placeholder="Quantity / Lots" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="check-circle-2" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <select id="result" name="result" required></select>
                                </div>
                            </div>
                        </div>

                        <div class="form-section col-span-full">
                            <h3 class="form-section-title flex items-center"><i data-lucide="smile" class="mr-2"></i> Emotional State</h3>
                            <label class="block text-zinc-300 text-sm font-bold mb-2">Select Emotions:</label>
                            <div id="emotion-emoji-grid" class="emotion-emoji-grid"></div>
                        </div>

                        <div class="form-section col-span-full">
                            <h3 class="form-section-title flex items-center"><i data-lucide="file-text" class="mr-2"></i> Notes & Media</h3>
                            <div class="grid grid-cols-1 gap-4">
                                <div class="input-group items-start">
                                    <i data-lucide="pencil" class="mr-3 mt-2 flex-shrink-0 text-zinc-400"></i>
                                    <textarea id="notes" name="notes" rows="3" placeholder="Notes & Learnings"></textarea>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="folder-output" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="text" id="drive-link" name="driveLink" placeholder="Google Drive Folder Link (Required)" required>
                                </div>
                                <div class="input-group">
                                    <i data-lucide="tags" class="mr-3 flex-shrink-0 text-zinc-400"></i>
                                    <input type="text" id="tags" name="tags" placeholder="Tags (e.g., momentum, scalp, breakout)">
                                </div>
                            </div>
                        </div>

                        <div class="col-span-full flex justify-end mt-4">
                            <button type="submit" class="btn-primary">${tradeToEdit ? 'Update Trade' : 'Save Trade'}</button>
                        </div>
                    </form>
                </div>
            `;
            populateFormSelects(); // Populates dropdowns and emoji grid
            const form = document.getElementById('trade-entry-form');
            form.addEventListener('submit', handleTradeFormSubmit);

            // Add event listeners for instrument selection and type change for lot size auto-fill
            const instrumentInput = document.getElementById('instrument');
            const typeSelect = document.getElementById('type');
            const quantityInput = document.getElementById('quantity');

            // Function to update quantity based on instrument and type
            const updateQuantityBasedOnLotSize = () => {
                const selectedInstrumentSymbol = instrumentInput.value.toUpperCase();
                const selectedType = typeSelect.value;
                const instrumentData = INSTRUMENTS_AND_LOT_SIZES.find(item => item.symbol === selectedInstrumentSymbol);

                if (instrumentData && (selectedType === 'Futures' || selectedType.startsWith('Options-'))) {
                    quantityInput.value = instrumentData.lotSize;
                    quantityInput.readOnly = true; // Make quantity read-only for F&O
                } else {
                    quantityInput.value = ''; // Clear for cash or if no instrument data
                    quantityInput.readOnly = false; // Make quantity editable
                }
            };

            // Listen for changes on both instrument input (after autocomplete selection) and type select
            instrumentInput.addEventListener('change', updateQuantityBasedOnLotSize);
            typeSelect.addEventListener('change', updateQuantityBasedOnLotSize);


            if (tradeToEdit) {
                // Pre-fill form for editing
                document.getElementById('instrument').value = tradeToEdit.instrument || '';
                document.getElementById('type').value = tradeToEdit.type || '';
                document.getElementById('entry-date').value = tradeToEdit.entryDate || '';
                document.getElementById('entry-time').value = tradeToEdit.entryTime || '';
                document.getElementById('exit-date').value = tradeToEdit.exitDate || '';
                document.getElementById('exit-time').value = tradeToEdit.exitTime || '';
                document.getElementById('entry-price').value = tradeToEdit.entryPrice || '';
                document.getElementById('exit-price').value = tradeToEdit.exitPrice || '';
                document.getElementById('quantity').value = tradeToEdit.quantity || '';
                document.getElementById('strategy').value = tradeToEdit.strategyUsed || '';
                document.getElementById('result').value = tradeToEdit.result || '';
                document.getElementById('notes').value = tradeToEdit.notes || '';
                document.getElementById('drive-link').value = tradeToEdit.driveLink || '';
                document.getElementById('tags').value = (tradeToEdit.tags || []).join(', ');

                // Select emotions
                if (tradeToEdit.emotions) {
                    tradeToEdit.emotions.forEach(emotionName => {
                        const emojiItem = document.querySelector(`#emotion-emoji-grid [data-emotion="${emotionName}"]`);
                        if (emojiItem) {
                            emojiItem.classList.add('selected');
                        }
                    });
                }
                // Also apply lot size logic when editing
                updateQuantityBasedOnLotSize();
            } else {
                // Set default date/time to now for new entries
                const now = new Date();
                document.getElementById('entry-date').value = now.toISOString().split('T')[0];
                document.getElementById('entry-time').value = now.toTimeString().substring(0, 5);
                document.getElementById('exit-date').value = now.toISOString().split('T')[0];
                document.getElementById('exit-time').value = now.toTimeString().substring(0, 5);
            }
            lucide.createIcons(); // Ensure icons are rendered

            // Add autocomplete logic after the input is in the DOM
            setupAutocomplete();
        }

        /**
         * Sets up autocomplete for the instrument input field.
         */
        function setupAutocomplete() {
            const instrumentInput = document.getElementById('instrument');
            const autocompleteSuggestions = document.getElementById('autocomplete-suggestions');
            let activeSuggestionIndex = -1;
            let filteredSymbols = [];

            instrumentInput.addEventListener('input', () => {
                const query = instrumentInput.value.toUpperCase();
                autocompleteSuggestions.innerHTML = '';
                autocompleteSuggestions.style.display = 'none';
                activeSuggestionIndex = -1;

                if (query.length < 2) return;

                filteredSymbols = INSTRUMENTS_AND_LOT_SIZES.filter(item =>
                    item.symbol.includes(query) || item.company.toUpperCase().includes(query)
                ).slice(0, 10); // Limit to 10 suggestions

                if (filteredSymbols.length > 0) {
                    filteredSymbols.forEach((item, index) => {
                        const div = document.createElement('div');
                        div.className = 'autocomplete-suggestion-item';
                        div.textContent = `${item.symbol} (${item.company})`;
                        div.addEventListener('click', () => {
                            instrumentInput.value = item.symbol;
                            autocompleteSuggestions.innerHTML = '';
                            autocompleteSuggestions.style.display = 'none';
                            // Trigger lot size update immediately after selection
                            document.getElementById('type').dispatchEvent(new Event('change'));
                        });
                        autocompleteSuggestions.appendChild(div);
                    });
                    autocompleteSuggestions.style.display = 'block';
                }
            });

            instrumentInput.addEventListener('keydown', (e) => {
                const items = autocompleteSuggestions.querySelectorAll('.autocomplete-suggestion-item');
                if (items.length === 0) return;

                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    activeSuggestionIndex = (activeSuggestionIndex + 1) % items.length;
                    highlightSuggestion(items);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    activeSuggestionIndex = (activeSuggestionIndex - 1 + items.length) % items.length;
                    highlightSuggestion(items);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (activeSuggestionIndex > -1) {
                        items[activeSuggestionIndex].click();
                    }
                } else if (e.key === 'Escape') {
                    autocompleteSuggestions.innerHTML = '';
                    autocompleteSuggestions.style.display = 'none';
                }
            });

            function highlightSuggestion(items) {
                items.forEach((item, index) => {
                    if (index === activeSuggestionIndex) {
                        item.classList.add('active');
                        item.scrollIntoView({ block: 'nearest' });
                    } else {
                        item.classList.remove('active');
                    }
                });
            }

            document.addEventListener('click', (e) => {
                if (!instrumentInput.contains(e.target) && !autocompleteSuggestions.contains(e.target)) {
                    autocompleteSuggestions.innerHTML = '';
                    autocompleteSuggestions.style.display = 'none';
                }
            });
        }


        /**
         * Populates select dropdowns and emoji grid for the trade entry form.
         */
        function populateFormSelects() {
            const typeSelect = document.getElementById('type');
            typeSelect.innerHTML = '<option value="">Select Type</option>'; // Add a default placeholder
            instrumentTypes.forEach(type => {
                const option = document.createElement('option');
                option.value = type;
                option.textContent = type;
                typeSelect.appendChild(option);
            });

            const strategySelect = document.getElementById('strategy');
            strategySelect.innerHTML = '<option value="">Select Strategy</option>';
            STRATEGIES.forEach(strategy => {
                const option = document.createElement('option');
                option.value = strategy;
                option.textContent = strategy;
                strategySelect.appendChild(option);
            });

            const resultSelect = document.getElementById('result');
            resultSelect.innerHTML = '<option value="">Select Result</option>';
            tradeResults.forEach(result => {
                const option = document.createElement('option');
                option.value = result;
                option.textContent = result;
                resultSelect.appendChild(option);
            });

            const emotionEmojiGrid = document.getElementById('emotion-emoji-grid');
            emotionEmojiGrid.innerHTML = ''; // Clear existing
            EMOTIONS.forEach(emotion => {
                const div = document.createElement('div');
                div.className = "emotion-emoji-item";
                div.setAttribute('data-emotion', emotion.name);
                div.innerHTML = `
                    <span class="emoji">${emotion.emoji}</span>
                    <span>${emotion.name}</span>
                `;
                div.addEventListener('click', () => {
                    div.classList.toggle('selected');
                });
                emotionEmojiGrid.appendChild(div);
            });
        }

        /**
         * Handles the submission of the trade entry form.
         * @param {Event} event - The form submission event.
         */
        async function handleTradeFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const tradeData = {};

            for (const [key, value] of formData.entries()) {
                if (key === 'tags') {
                    tradeData[key] = value.split(',').map(tag => tag.trim()).filter(tag => tag !== '');
                } else if (['entryPrice', 'exitPrice', 'quantity'].includes(key)) {
                    tradeData[key] = parseFloat(value);
                } else {
                    tradeData[key] = value;
                }
            }

            // Get selected emotions from the emoji grid
            tradeData.emotions = Array.from(document.querySelectorAll('#emotion-emoji-grid .emotion-emoji-item.selected'))
                                    .map(el => el.getAttribute('data-emotion'));

            // Calculate P&L
            const pnl = (tradeData.exitPrice - tradeData.entryPrice) * tradeData.quantity; // Corrected PnL calculation
            tradeData.pnl = pnl;

            // Validate Google Drive Link format
            const googleDriveLinkRegex = /^https:\/\/drive\.google\.com\/(drive\/folders\/|file\/d\/)[a-zA-Z0-9_-]+/;
            if (!googleDriveLinkRegex.test(tradeData.driveLink)) {
                showMessage("Validation Error", "Please enter a valid Google Drive folder or file link.");
                return;
            }

            const tradeId = document.getElementById('trade-id')?.value;
            let successMessage = "Trade saved successfully!";
            try {
                if (tradeId) {
                    tradeData.id = parseInt(tradeId); // Ensure ID is parsed as integer
                    await updateEntry(STORE_TRADES, tradeData);
                    successMessage = "Trade updated successfully!";
                } else {
                    await addEntry(STORE_TRADES, tradeData);
                }

                await showMessage("Success", successMessage);
                form.reset(); // Clear the form
                // Clear selected emotions
                document.querySelectorAll('#emotion-emoji-grid .emotion-emoji-item').forEach(el => el.classList.remove('selected'));
                // Refresh allTrades cache
                allTrades = await getEntries(STORE_TRADES);
                showView('dashboard'); // Re-render the dashboard to reflect new data
            } catch (error) {
                console.error("Failed to save/update trade:", error);
                showMessage("Error", `Failed to save/update trade: ${error.message}.`);
            }
        }

        /**
         * Renders the View Trades table with search and filters.
         */
        async function renderViewTrades() {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl mb-6 border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Your Trade History</h2>
                    <div class="flex flex-col md:flex-row gap-3 mb-5">
                        <input type="text" id="search-input" placeholder="Search instrument, strategy, notes..." class="flex-1 p-2 rounded-md bg-zinc-700 border border-zinc-600">
                        <select id="filter-strategy" class="p-2 rounded-md bg-zinc-700 border border-zinc-600 text-sm"></select>
                        <select id="filter-result" class="p-2 rounded-md bg-zinc-700 border border-zinc-600 text-sm"></select>
                        <input type="date" id="filter-start-date" class="p-2 rounded-md bg-zinc-700 border border-zinc-600 text-sm">
                        <input type="date" id="filter-end-date" class="p-2 rounded-md bg-zinc-700 border border-zinc-600 text-sm">
                        <button id="clear-filters" class="btn-secondary px-3 py-1 text-sm">Clear Filters</button>
                    </div>
                    <div id="calendar-view-container" class="bg-zinc-700 p-3 rounded-lg mb-5">
                        <div class="flex justify-between items-center mb-3">
                            <button id="prev-month-btn" class="btn-secondary px-2 py-1 text-sm"><i data-lucide="chevron-left"></i></button>
                            <h3 id="current-month-year" class="text-indigo-300 font-semibold text-lg"></h3>
                            <button id="next-month-btn" class="btn-secondary px-2 py-1 text-sm"><i data-lucide="chevron-right"></i></button>
                        </div>
                        <div id="calendar-view" class="grid grid-cols-7 gap-1 text-center text-xs">
                            <!-- Calendar will be rendered here -->
                        </div>
                    </div>
                    <div id="trades-list" class="trade-table-container">
                        <table class="trade-table">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Instrument</th>
                                    <th>Type</th>
                                    <th>Strategy</th>
                                    <th>Result</th>
                                    <th>P&L (₹)</th>
                                    <th>Emotions</th>
                                    <th>Files</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="trades-table-body">
                                <!-- Trades will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                    <p id="no-trades-message" class="text-center text-zinc-400 mt-4 hidden">No trades found matching your criteria.</p>
                </div>
            `;

            // Populate filters
            const filterStrategySelect = document.getElementById('filter-strategy');
            const filterResultSelect = document.getElementById('filter-result');

            filterStrategySelect.innerHTML = '<option value="">All Strategies</option>';
            STRATEGIES.forEach(s => {
                const opt = document.createElement('option');
                opt.value = s;
                opt.textContent = s;
                filterStrategySelect.appendChild(opt);
            });

            filterResultSelect.innerHTML = '<option value="">All Results</option>';
            tradeResults.forEach(r => {
                const opt = document.createElement('option');
                opt.value = r;
                opt.textContent = r;
                filterResultSelect.appendChild(opt);
            });

            const searchInput = document.getElementById('search-input');
            const filterStartDate = document.getElementById('filter-start-date');
            const filterEndDate = document.getElementById('filter-end-date');
            const clearFiltersButton = document.getElementById('clear-filters');

            // Calendar Navigation buttons
            document.getElementById('prev-month-btn').addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
                filterAndDisplayTrades(); // Re-render calendar and trades for new month
            });
            document.getElementById('next-month-btn').addEventListener('click', () => {
                currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
                filterAndDisplayTrades(); // Re-render calendar and trades for new month
            });


            // Event listeners for filtering and searching
            searchInput.addEventListener('input', filterAndDisplayTrades);
            filterStrategySelect.addEventListener('change', filterAndDisplayTrades);
            filterResultSelect.addEventListener('change', filterAndDisplayTrades);
            filterStartDate.addEventListener('change', filterAndDisplayTrades);
            filterEndDate.addEventListener('change', filterAndDisplayTrades);
            clearFiltersButton.addEventListener('click', () => {
                searchInput.value = '';
                filterStrategySelect.value = '';
                filterResultSelect.value = '';
                filterStartDate.value = '';
                filterEndDate.value = '';
                currentCalendarDate = new Date(); // Reset calendar to current month
                filterAndDisplayTrades();
            });

            await filterAndDisplayTrades(); // Initial load of trades
            lucide.createIcons(); // Ensure icons are rendered
        }

        /**
         * Filters trades based on current criteria and displays them.
         */
        async function filterAndDisplayTrades() {
            // Re-fetch all trades from DB to ensure cache is fresh before filtering/displaying
            allTrades = await getEntries(STORE_TRADES);

            const searchInput = document.getElementById('search-input').value.toLowerCase();
            const filterStrategy = document.getElementById('filter-strategy').value;
            const filterResult = document.getElementById('filter-result').value;
            const filterStartDate = document.getElementById('filter-start-date').value;
            const filterEndDate = document.getElementById('filter-end-date').value;

            let filteredTrades = allTrades.filter(trade => {
                const matchesSearch = searchInput === '' ||
                                      trade.instrument.toLowerCase().includes(searchInput) ||
                                      (trade.notes && trade.notes.toLowerCase().includes(searchInput)) ||
                                      (trade.tags && trade.tags.some(tag => tag.toLowerCase().includes(searchInput))) ||
                                      (trade.strategyUsed && trade.strategyUsed.toLowerCase().includes(searchInput));

                const matchesStrategy = filterStrategy === '' || trade.strategyUsed === filterStrategy;
                const matchesResult = filterResult === '' || trade.result === filterResult;

                const tradeDate = new Date(trade.entryDate);
                const matchesStartDate = filterStartDate === '' || tradeDate >= new Date(filterStartDate + 'T00:00:00'); // Add time to ensure correct comparison
                const matchesEndDate = filterEndDate === '' || tradeDate <= new Date(filterEndDate + 'T23:59:59'); // Add time to ensure correct comparison

                return matchesSearch && matchesStrategy && matchesResult && matchesStartDate && matchesEndDate;
            });

            displayTrades(filteredTrades);
            // Pass *all* trades for highlighting to calendar, but filter calendar view by current month
            renderCalendar(allTrades);
        }

        /**
         * Displays a list of trades in the table.
         * @param {Array<Object>} trades - The trades to display.
         */
        function displayTrades(trades) {
            const tbody = document.getElementById('trades-table-body');
            const noTradesMessage = document.getElementById('no-trades-message');
            tbody.innerHTML = ''; // Clear existing rows

            if (trades.length === 0) {
                noTradesMessage.classList.remove('hidden');
                return;
            } else {
                noTradesMessage.classList.add('hidden');
            }

            trades.sort((a, b) => new Date(b.entryDate) - new Date(a.entryDate)); // Sort by date descending

            trades.forEach(trade => {
                const row = document.createElement('tr');
                row.className = "hover:bg-gray-700 transition-colors duration-150";
                const pnlClass = trade.pnl >= 0 ? 'text-emerald-400' : 'text-red-400';

                // Map stored emotion names back to emojis
                const emotionEmojis = (trade.emotions || [])
                    .map(emotionName => EMOTIONS.find(e => e.name === emotionName)?.emoji || '')
                    .join(' ');


                row.innerHTML = `
                    <td class="px-3 py-2 whitespace-nowrap">${trade.entryDate}</td>
                    <td class="px-3 py-2 whitespace-nowrap">${trade.instrument}</td>
                    <td class="px-3 py-2 whitespace-nowrap">${trade.type}</td>
                    <td class="px-3 py-2 whitespace-nowrap">${trade.strategyUsed || 'N/A'}</td>
                    <td class="px-3 py-2 whitespace-nowrap">${trade.result}</td>
                    <td class="px-3 py-2 whitespace-nowrap ${pnlClass}">${formatRupee(trade.pnl)}</td>
                    <td class="px-3 py-2 whitespace-nowrap">${emotionEmojis}</td>
                    <td class="px-3 py-2 whitespace-nowrap">
                        <a href="${trade.driveLink}" target="_blank" rel="noopener noreferrer" class="text-indigo-400 hover:text-indigo-300 text-sm">
                            <i data-lucide="folder-output" class="inline-block align-middle mr-1"></i> Files
                        </a>
                    </td>
                    <td class="px-3 py-2 whitespace-nowrap text-right">
                        <button class="text-blue-500 hover:text-blue-600 edit-trade-btn text-sm mr-2" data-id="${trade.id}">
                            <i data-lucide="edit-3" class="inline-block align-middle"></i>
                        </button>
                        <button class="text-red-500 hover:text-red-600 delete-trade-btn text-sm" data-id="${trade.id}">
                            <i data-lucide="trash-2" class="inline-block align-middle"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // Re-create lucide icons for newly added elements
            lucide.createIcons();

            // Add event listeners for edit and delete buttons
            document.querySelectorAll('.edit-trade-btn').forEach(button => {
                button.addEventListener('click', async (event) => {
                    const tradeId = parseInt(event.currentTarget.dataset.id);
                    const tradeToEdit = allTrades.find(t => t.id === tradeId);
                    if (tradeToEdit) {
                        showView('add-trade', tradeToEdit); // Pass the trade object to renderAddTradeForm
                    }
                });
            });

            // FIX: Re-attaching event listeners for delete buttons after re-rendering the table
            document.querySelectorAll('.delete-trade-btn').forEach(button => {
                button.addEventListener('click', async (event) => {
                    const tradeId = parseInt(event.currentTarget.dataset.id);
                    const confirmDelete = await showMessage("Confirm Delete", "Are you sure you want to delete this trade entry?");
                    if (confirmDelete) {
                        try {
                            await deleteEntry(STORE_TRADES, tradeId);
                            await showMessage("Deleted", "Trade deleted successfully.");
                            // After successful deletion, refresh the data and then re-render the current view
                            await filterAndDisplayTrades(); // This will re-fetch and re-display
                            const currentView = document.getElementById('app-content').dataset.currentView;
                            if (currentView === 'dashboard' || currentView === 'analytics') {
                                showView(currentView); // Refresh dashboard/analytics to reflect changes
                            }
                        } catch (error) {
                            console.error("Error deleting trade:", error);
                            showMessage("Error", "Failed to delete trade.");
                        }
                    }
                });
            });
        }

        /**
         * Renders the calendar view.
         * @param {Array<Object>} allTrades - All trades for highlighting dates.
         */
        function renderCalendar(allTrades) {
            const calendarView = document.getElementById('calendar-view');
            const currentMonthYearHeader = document.getElementById('current-month-year');
            calendarView.innerHTML = ''; // Clear previous calendar

            const year = currentCalendarDate.getFullYear();
            const month = currentCalendarDate.getMonth(); // 0-indexed

            currentMonthYearHeader.textContent = currentCalendarDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });

            const firstDayOfMonth = new Date(year, month, 1);
            const lastDayOfMonth = new Date(year, month + 1, 0);
            const daysInMonth = lastDayOfMonth.getDate();
            const startDayOfWeek = firstDayOfMonth.getDay(); // 0 for Sunday, 1 for Monday

            // Map trade dates to a Set for quick lookup
            // Only trades within the current calendar month should determine highlighting
            const tradesInCurrentMonth = allTrades.filter(trade => {
                const tradeDate = new Date(trade.entryDate);
                return tradeDate.getFullYear() === year && tradeDate.getMonth() === month;
            });
            const tradeDatesInMonth = new Set(tradesInCurrentMonth.map(trade => trade.entryDate));

            // Day names
            const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            dayNames.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'font-bold text-indigo-300';
                dayHeader.textContent = day;
                calendarView.appendChild(dayHeader);
            });

            // Empty cells for the start of the month
            for (let i = 0; i < startDayOfWeek; i++) {
                const emptyDiv = document.createElement('div');
                emptyDiv.className = 'p-1';
                calendarView.appendChild(emptyDiv);
            }

            // Days of the month
            const today = new Date(); // To highlight current day
            for (let day = 1; day <= daysInMonth; day++) {
                const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                const dayDiv = document.createElement('div');
                dayDiv.className = `p-1 rounded-md cursor-pointer hover:bg-zinc-600 transition-colors duration-200`;

                if (tradeDatesInMonth.has(dateStr)) {
                    dayDiv.classList.add('bg-indigo-700', 'text-white', 'font-bold', 'shadow-md');
                    dayDiv.title = `Trades on ${dateStr}`;
                } else {
                    dayDiv.classList.add('bg-zinc-700', 'text-zinc-300');
                }
                // Highlight today's date if it's in the current calendar month
                if (day === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
                    dayDiv.classList.add('border-2', 'border-indigo-400');
                }

                dayDiv.textContent = day;
                // Add click listener to filter trades by the clicked date
                dayDiv.addEventListener('click', () => {
                    document.getElementById('filter-start-date').value = dateStr;
                    document.getElementById('filter-end-date').value = dateStr;
                    filterAndDisplayTrades();
                });
                calendarView.appendChild(dayDiv);
            }
            lucide.createIcons();
        }


        /**
         * Renders the Performance Dashboard (main overview).
         */
        async function renderDashboard() {
            destroyAllCharts(); // Destroy any existing charts
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Overall Performance</h2>

                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md text-center border border-zinc-600">
                            <h3 class="text-indigo-300 text-base font-semibold">Total Trades</h3>
                            <p id="total-trades" class="text-3xl font-bold text-white mt-1">0</p>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md text-center border border-zinc-600">
                            <h3 class="text-indigo-300 text-base font-semibold">Net P&L (₹)</h3>
                            <p id="net-pnl" class="text-3xl font-bold text-white mt-1">₹0.00</p>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md text-center border border-zinc-600">
                            <h3 class="text-indigo-300 text-base font-semibold">Win Rate</h3>
                            <p id="win-rate" class="text-3xl font-bold text-white mt-1">0.00%</p>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md text-center border border-zinc-600">
                            <h3 class="text-indigo-300 text-base font-semibold">Avg. P&L / Trade</h3>
                            <p id="avg-pnl-trade" class="text-3xl font-bold text-white mt-1">₹0.00</p>
                        </div>
                    </div>

                    <div class="bg-zinc-700 p-5 rounded-lg shadow-md border border-zinc-600">
                        <h3 class="text-indigo-300 text-xl font-semibold mb-4">Equity Curve</h3>
                        <div class="flex flex-wrap gap-2 mb-4">
                            <button class="btn-toggle active" data-filter="all">All Time</button>
                            <button class="btn-toggle" data-filter="weekly">Weekly</button>
                            <button class="btn-toggle" data-filter="monthly">Monthly</button>
                            <button class="btn-toggle" data-filter="quarterly">Quarterly</button>
                            <button class="btn-toggle" data-filter="yearly">Yearly</button>
                        </div>
                        <div class="chart-container">
                            <canvas id="equity-chart"></canvas>
                        </div>
                    </div>
                </div>
            `;

            allTrades = await getEntries(STORE_TRADES); // Ensure trades are fresh
            updateDashboardStats(allTrades);
            renderEquityCurve(allTrades, 'all'); // Initial render of equity curve

            document.querySelectorAll('.btn-toggle').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.btn-toggle').forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    renderEquityCurve(allTrades, this.dataset.filter);
                });
            });
        }

        /**
         * Renders the Advanced Analytics page with all detailed charts.
         */
        async function renderAnalytics() {
            destroyAllCharts(); // Destroy any existing charts
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Advanced Analytics</h2>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div class="bg-zinc-700 p-5 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h3 class="text-indigo-300 text-xl font-semibold mb-4">Strategy Breakdown</h3>
                            <div class="chart-container"><canvas id="strategy-chart"></canvas></div>
                        </div>
                        <div class="bg-zinc-700 p-5 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h3 class="text-indigo-300 text-xl font-semibold mb-4">Emotion Breakdown</h3>
                            <div class="chart-container"><canvas id="emotion-chart"></canvas></div>
                        </div>
                        <div class="bg-zinc-700 p-5 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h3 class="text-indigo-300 text-xl font-semibold mb-4">P&L Distribution by Type</h3>
                            <div class="chart-container"><canvas id="type-chart"></canvas></div>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h4 class="text-indigo-300 text-lg font-semibold mb-2">Daily P&L</h4>
                            <div class="chart-container"><canvas id="daily-pnl-chart"></canvas></div>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h4 class="text-indigo-300 text-lg font-semibold mb-2">Weekly P&L</h4>
                            <div class="chart-container"><canvas id="weekly-pnl-chart"></canvas></div>
                        </div>
                        <div class="bg-zinc-700 p-4 rounded-lg shadow-md border border-zinc-600 chart-bg">
                            <h4 class="text-indigo-300 text-lg font-semibold mb-2">Reflections Logged Over Time</h4>
                            <div class="chart-container"><canvas id="reflections-over-time-chart"></canvas></div>
                        </div>
                    </div>
                </div>
            `;
            allTrades = await getEntries(STORE_TRADES); // Ensure trades are fresh
            allReflections = await getEntries(STORE_REFLECTIONS); // Ensure reflections are fresh

            renderAllDetailedCharts(allTrades, allReflections);
        }

        /**
         * Updates the dashboard statistical figures.
         * @param {Array<Object>} trades - The array of trade objects.
         */
        function updateDashboardStats(trades) {
            const totalTrades = trades.length;
            const totalPnl = trades.reduce((sum, trade) => sum + trade.pnl, 0);
            const winTrades = trades.filter(trade => trade.result === 'Win').length;
            const lossTrades = trades.filter(trade => trade.result === 'Loss').length;

            const winRate = totalTrades > 0 ? (winTrades / totalTrades) * 100 : 0;
            const avgPnlPerTrade = totalTrades > 0 ? totalPnl / totalTrades : 0;

            document.getElementById('total-trades').textContent = totalTrades;
            document.getElementById('net-pnl').textContent = formatRupee(totalPnl);
            document.getElementById('net-pnl').className = `text-3xl font-bold mt-1 ${totalPnl >= 0 ? 'text-emerald-400' : 'text-red-400'}`;
            document.getElementById('win-rate').textContent = `${winRate.toFixed(2)}%`;
            document.getElementById('avg-pnl-trade').textContent = formatRupee(avgPnlPerTrade);
        }

        /**
         * Renders the Equity Curve chart with date filtering.
         * @param {Array<Object>} trades - The array of trade objects.
         * @param {string} filterType - 'all', 'weekly', 'monthly', 'quarterly', 'yearly'.
         */
        function renderEquityCurve(trades, filterType) {
            Chart.getChart('equity-chart')?.destroy(); // Destroy existing chart

            const isDarkTheme = document.documentElement.classList.contains('dark');
            const textColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-text-color').trim();
            const gridColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-grid-color').trim();
            const tooltipBgColor = isDarkTheme ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255,255,255,0.8)';
            const tooltipBorderColor = getComputedStyle(document.documentElement).getPropertyValue('--border-color').trim();


            let filteredTrades = [...trades].sort((a, b) => new Date(a.entryDate) - new Date(b.entryDate));

            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth(); // 0-indexed

            if (filterType !== 'all') {
                filteredTrades = filteredTrades.filter(trade => {
                    const tradeDate = new Date(trade.entryDate);
                    switch (filterType) {
                        case 'weekly':
                            const startOfWeek = new Date(now);
                            startOfWeek.setDate(now.getDate() - now.getDay()); // Sunday
                            return tradeDate >= startOfWeek;
                        case 'monthly':
                            return tradeDate.getMonth() === month && tradeDate.getFullYear() === year;
                        case 'quarterly':
                            const currentQuarter = Math.floor(month / 3);
                            return Math.floor(tradeDate.getMonth() / 3) === currentQuarter && tradeDate.getFullYear() === year;
                        case 'yearly':
                            return tradeDate.getFullYear() === year;
                        default:
                            return true;
                    }
                });
            }

            const equityLabels = filteredTrades.map(trade => trade.entryDate);
            let cumulativePnl = 0;
            const equityData = filteredTrades.map(trade => {
                cumulativePnl += trade.pnl;
                return cumulativePnl;
            });

            const ctx = document.getElementById('equity-chart');
            if (!ctx) return; // Exit if canvas not found

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: equityLabels,
                    datasets: [{
                        label: 'Cumulative P&L',
                        data: equityData,
                        borderColor: getComputedStyle(document.documentElement).getPropertyValue('--accent-primary').trim(),
                        backgroundColor: isDarkTheme ? 'rgba(99, 102, 241, 0.2)' : 'rgba(99, 102, 241, 0.1)',
                        fill: true,
                        tension: 0.3,
                        pointRadius: 3,
                        pointBackgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--accent-primary').trim(),
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false, // Essential for fixed height containers
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: tooltipBgColor,
                            borderColor: tooltipBorderColor,
                            borderWidth: 1,
                            titleColor: textColor,
                            bodyColor: textColor,
                        },
                        datalabels: { display: false } // Disable datalabels for line chart
                    },
                    scales: {
                        x: {
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        },
                        y: {
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        }
                    }
                }
            });
        }


        /**
         * Renders all detailed charts for the Advanced Analytics page.
         * @param {Array<Object>} trades - The array of trade objects.
         * @param {Array<Object>} reflections - The array of reflection objects.
         */
        function renderAllDetailedCharts(trades, reflections) {
            destroyAllCharts(); // Destroy all charts explicitly before rendering new ones

            // Colors for charts based on theme
            const isDarkTheme = document.documentElement.classList.contains('dark');
            const textColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-text-color').trim();
            const gridColor = getComputedStyle(document.documentElement).getPropertyValue('--chart-grid-color').trim();
            const tooltipBgColor = isDarkTheme ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255,255,255,0.8)';
            const tooltipBorderColor = getComputedStyle(document.documentElement).getPropertyValue('--border-color').trim();


            const defaultChartOptions = {
                responsive: true,
                maintainAspectRatio: false, // Crucial for fixed height
                plugins: {
                    legend: {
                        labels: { color: textColor }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        backgroundColor: tooltipBgColor,
                        borderColor: tooltipBorderColor,
                        borderWidth: 1,
                        titleColor: textColor,
                        bodyColor: textColor,
                    },
                    datalabels: { display: false } // Default to false, enable only for pie/doughnut if needed
                },
                scales: {
                    x: {
                        ticks: { color: textColor },
                        grid: { color: gridColor }
                    },
                    y: {
                        ticks: { color: textColor },
                        grid: { color: gridColor }
                    }
                }
            };

            // Strategy Breakdown Data
            const strategyMap = {};
            trades.forEach(trade => {
                strategyMap[trade.strategyUsed] = (strategyMap[trade.strategyUsed] || 0) + 1;
            });
            const strategyLabels = Object.keys(strategyMap);
            const strategyData = Object.values(strategyMap);

            new Chart(document.getElementById('strategy-chart'), {
                type: 'doughnut',
                data: {
                    labels: strategyLabels,
                    datasets: [{
                        data: strategyData,
                        backgroundColor: [
                            '#6366f1', '#a855f7', '#f472b6', '#ef4444', '#f59e0b',
                            '#eab308', '#22c55e', '#14b8a6', '#06b6d4', '#3b82f6', '#fb923c' // Added one more color
                        ],
                        hoverOffset: 8
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: {
                        ...defaultChartOptions.plugins,
                        legend: {
                            position: 'right',
                            labels: { color: textColor }
                        },
                        datalabels: { // Enable datalabels for doughnut
                            color: textColor,
                            formatter: (value, ctx) => {
                                let sum = 0;
                                let dataArr = ctx.chart.data.datasets[0].data;
                                dataArr.map(data => { sum += data; });
                                let percentage = (value * 100 / sum).toFixed(1) + '%';
                                return percentage;
                            },
                            font: { weight: 'bold' }
                        }
                    }
                }
            });

            // Emotion Breakdown Data
            const emotionMap = {};
            trades.forEach(trade => {
                if (trade.emotions) {
                    trade.emotions.forEach(emotionName => {
                        emotionMap[emotionName] = (emotionMap[emotionName] || 0) + 1;
                    });
                }
            });
            const emotionLabels = Object.keys(emotionMap);
            const emotionData = Object.values(emotionMap);

            new Chart(document.getElementById('emotion-chart'), {
                type: 'bar',
                data: {
                    labels: emotionLabels,
                    datasets: [{
                        label: 'Emotion Count',
                        data: emotionData,
                        backgroundColor: '#a855f7',
                        borderColor: '#9333ea',
                        borderWidth: 1
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: { legend: { display: false } }, // Override legend to hide for bar chart
                    scales: {
                        x: {
                            ticks: { color: textColor },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        }
                    }
                }
            });

            // P&L Distribution by Type Data
            const typePnlMap = {};
            trades.forEach(trade => {
                typePnlMap[trade.type] = (typePnlMap[trade.type] || 0) + trade.pnl;
            });
            const typeLabels = Object.keys(typePnlMap);
            const typeData = Object.values(typePnlMap);

            new Chart(document.getElementById('type-chart'), {
                type: 'bar',
                data: {
                    labels: typeLabels,
                    datasets: [{
                        label: 'Net P&L',
                        data: typeData,
                        backgroundColor: typeData.map(pnl => pnl >= 0 ? '#22c55e' : '#ef4444'),
                        borderColor: typeData.map(pnl => pnl >= 0 ? '#16a34a' : '#dc2626'),
                        borderWidth: 1
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: { legend: { display: false } },
                    scales: {
                        x: {
                            ticks: { color: textColor },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: false,
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        }
                    }
                }
            });

            // --- Daily and Weekly P&L Charts ---
            const dailyPnl = {};
            const weeklyPnl = {};

            trades.forEach(trade => {
                const date = new Date(trade.entryDate);
                const dateString = trade.entryDate; // YYYY-MM-DD
                const dayOfWeek = date.getDay(); // 0 for Sunday, 6 for Saturday
                const weekStart = new Date(date);
                weekStart.setDate(date.getDate() - dayOfWeek); // Go back to Sunday (start of week)
                const weekStartDateString = weekStart.toISOString().split('T')[0];

                dailyPnl[dateString] = (dailyPnl[dateString] || 0) + trade.pnl;
                weeklyPnl[weekStartDateString] = (weeklyPnl[weekStartDateString] || 0) + trade.pnl;
            });

            // Sort and prepare daily data
            const sortedDailyLabels = Object.keys(dailyPnl).sort();
            const sortedDailyData = sortedDailyLabels.map(date => dailyPnl[date]);

            new Chart(document.getElementById('daily-pnl-chart'), {
                type: 'bar',
                data: {
                    labels: sortedDailyLabels,
                    datasets: [{
                        label: 'Daily P&L',
                        data: sortedDailyData,
                        backgroundColor: sortedDailyData.map(pnl => pnl >= 0 ? '#22c55e' : '#ef4444'),
                        borderColor: sortedDailyData.map(pnl => pnl >= 0 ? '#16a34a' : '#dc2626'),
                        borderWidth: 1
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: { legend: { display: false } },
                    scales: {
                        x: {
                            ticks: { color: textColor, maxRotation: 45, minRotation: 45 },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: false,
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        }
                    }
                }
            });

            // Sort and prepare weekly data
            const sortedWeeklyLabels = Object.keys(weeklyPnl).sort();
            const sortedWeeklyData = sortedWeeklyLabels.map(date => weeklyPnl[date]);

            new Chart(document.getElementById('weekly-pnl-chart'), {
                type: 'bar',
                data: {
                    labels: sortedWeeklyLabels,
                    datasets: [{
                        label: 'Weekly P&L',
                        data: sortedWeeklyData,
                        backgroundColor: sortedWeeklyData.map(pnl => pnl >= 0 ? '#14b8a6' : '#f59e0b'),
                        borderColor: sortedWeeklyData.map(pnl => pnl >= 0 ? '#0d9488' : '#d97706'),
                        borderWidth: 1
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: { legend: { display: false } },
                    scales: {
                        x: {
                            ticks: { color: textColor, maxRotation: 45, minRotation: 45 },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: false,
                            ticks: { color: textColor },
                            grid: { color: gridColor }
                        }
                    }
                }
            });

            // --- Reflection Metrics: Reflections Logged Over Time ---
            const reflectionsByMonth = {};
            reflections.forEach(reflection => {
                const date = new Date(reflection.date);
                const monthYear = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                reflectionsByMonth[monthYear] = (reflectionsByMonth[monthYear] || 0) + 1;
            });

            const sortedReflectionMonths = Object.keys(reflectionsByMonth).sort();
            const reflectionCounts = sortedReflectionMonths.map(month => reflectionsByMonth[month]);

            new Chart(document.getElementById('reflections-over-time-chart'), {
                type: 'bar',
                data: {
                    labels: sortedReflectionMonths,
                    datasets: [{
                        label: 'Reflections Count',
                        data: reflectionCounts,
                        backgroundColor: '#3b82f6',
                        borderColor: '#2563eb',
                        borderWidth: 1
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    plugins: { legend: { display: false } },
                    scales: {
                        x: {
                            ticks: { color: textColor, maxRotation: 45, minRotation: 45 },
                            grid: { display: false }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: { color: textColor, stepSize: 1 },
                            grid: { color: gridColor }
                        }
                    }
                }
            });
        }


        /**
         * Renders the Reflections page with improved UI.
         */
        async function renderReflections() {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl mb-6 border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Trading Reflections</h2>
                    <form id="reflection-entry-form" class="grid grid-cols-1 gap-6">

                        <div class="form-section">
                            <h3 class="form-section-title flex items-center"><i data-lucide="calendar" class="mr-2"></i> Reflection Date</h3>
                            <div class="input-group">
                                <i data-lucide="calendar" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <input type="date" id="reflection-date" name="reflectionDate" required>
                            </div>
                        </div>

                        <div class="form-section">
                            <h3 class="form-section-title flex items-center"><i data-lucide="alert-circle" class="mr-2"></i> Mistake Log</h3>
                            <div class="input-group items-start">
                                <i data-lucide="target" class="text-zinc-400 mr-3 mt-2 flex-shrink-0"></i>
                                <textarea id="mistake-log" name="mistakeLog" rows="3" placeholder="What went wrong or could be improved?"></textarea>
                            </div>
                        </div>

                        <div class="form-section">
                            <h3 class="form-section-title flex items-center"><i data-lucide="lightbulb" class="mr-2"></i> Learnings</h3>
                            <div class="input-group items-start">
                                <i data-lucide="lightbulb" class="text-zinc-400 mr-3 mt-2 flex-shrink-0"></i>
                                <textarea id="learnings" name="learnings" rows="3" placeholder="What did you learn from this trade/period?"></textarea>
                            </div>
                        </div>

                        <div class="form-section">
                            <h3 class="form-section-title flex items-center"><i data-lucide="zap" class="mr-2"></i> Actionable Steps/Goals</h3>
                            <div class="input-group items-start">
                                <i data-lucide="zap" class="text-zinc-400 mr-3 mt-2 flex-shrink-0"></i>
                                <textarea id="actionable-steps" name="actionableSteps" rows="3" placeholder="What actionable steps will you take next?"></textarea>
                            </div>
                        </div>

                        <div class="flex justify-end mt-2 col-span-full">
                            <button type="submit" class="btn-primary">Save Reflection</button>
                        </div>
                    </form>

                    <h3 class="text-xl font-bold mb-4 text-indigo-400">Past Reflections</h3>
                    <div id="reflections-list" class="space-y-4">
                        <p class="text-zinc-400 text-center" id="no-reflections-message">No reflections logged yet.</p>
                        <!-- Reflections will be loaded here -->
                    </div>
                </div>
            `;
            lucide.createIcons();
            document.getElementById('reflection-entry-form').addEventListener('submit', handleReflectionFormSubmit);
            document.getElementById('reflection-date').value = new Date().toISOString().split('T')[0];
            await displayReflections();
        }

        /**
         * Handles the submission of the reflection entry form.
         * @param {Event} event - The form submission event.
         */
        async function handleReflectionFormSubmit(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const reflectionData = {
                date: formData.get('reflectionDate'),
                mistakeLog: formData.get('mistakeLog'),
                learnings: formData.get('learnings'),
                actionableSteps: formData.get('actionableSteps')
            };

            try {
                await addEntry(STORE_REFLECTIONS, reflectionData);
                await showMessage("Success", "Reflection saved successfully!");
                form.reset();
                document.getElementById('reflection-date').value = new Date().toISOString().split('T')[0]; // Reset date
                allReflections = await getEntries(STORE_REFLECTIONS); // Refresh cached reflections
                await displayReflections(); // Re-display list
                showView('analytics'); // Update analytics if visible
            } catch (error) {
                console.error("Failed to save reflection:", error);
                showMessage("Error", "Failed to save reflection.");
            }
        }

        /**
         * Displays all reflections.
         */
        async function displayReflections() {
            allReflections = await getEntries(STORE_REFLECTIONS); // Ensure fresh data
            const reflectionsList = document.getElementById('reflections-list');
            const noReflectionsMessage = document.getElementById('no-reflections-message');
            reflectionsList.innerHTML = ''; // Clear existing

            if (allReflections.length === 0) {
                noReflectionsMessage.classList.remove('hidden');
                return;
            } else {
                noReflectionsMessage.classList.add('hidden');
            }

            allReflections.sort((a, b) => new Date(b.date) - new Date(a.date)); // Sort by date descending

            allReflections.forEach(reflection => {
                const div = document.createElement('div');
                div.className = "reflection-entry border border-zinc-700";
                div.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <span class="font-bold text-lg text-indigo-300">${reflection.date}</span>
                        <button class="text-red-500 hover:text-red-600 delete-reflection-btn text-sm" data-id="${reflection.id}">
                            <i data-lucide="trash-2"></i>
                        </button>
                    </div>
                    ${reflection.mistakeLog ? `<p class="text-zinc-300 mb-1 text-sm"><span class="font-semibold text-indigo-200">Mistake Log:</span> ${reflection.mistakeLog}</p>` : ''}
                    ${reflection.learnings ? `<p class="text-zinc-300 mb-1 text-sm"><span class="font-semibold text-indigo-200">Learnings:</span> ${reflection.learnings}</p>` : ''}
                    ${reflection.actionableSteps ? `<p class="text-zinc-300 text-sm"><span class="font-semibold text-indigo-200">Actionable Steps:</span> ${reflection.actionableSteps}</p>` : ''}
                `;
                reflectionsList.appendChild(div);
            });
            lucide.createIcons();

            document.querySelectorAll('.delete-reflection-btn').forEach(button => {
                button.addEventListener('click', async (event) => {
                    const reflectionId = parseInt(event.currentTarget.dataset.id);
                    const confirmDelete = await showMessage("Confirm Delete", "Are you sure you want to delete this reflection entry?");
                    if (confirmDelete) {
                        try {
                            await deleteEntry(STORE_REFLECTIONS, reflectionId);
                            // allReflections will be refreshed by displayReflections, no need to filter here
                            await showMessage("Deleted", "Reflection deleted successfully.");
                            await displayReflections(); // Re-display list after deletion
                            // Ensure analytics also reflect deletion if it was the active view
                            const currentView = document.getElementById('app-content').dataset.currentView;
                            if (currentView === 'analytics') {
                                showView(currentView);
                            }
                        } catch (error) {
                            console.error("Error deleting reflection:", error);
                            showMessage("Error", "Failed to delete reflection.");
                        }
                    }
                });
            });
        }


        /**
         * Renders the Settings page with Export/Import and Delete All Data.
         */
        function renderSettings() {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl mb-6 border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Settings</h2>

                    <div class="mb-6 bg-zinc-700 p-4 rounded-lg border border-zinc-600">
                        <h3 class="text-xl font-semibold mb-3 text-zinc-300">Data Management</h3>
                        <p class="text-zinc-400 mb-4 text-sm">You can export your trading journal data as a JSON file for backup, or import data to restore it.</p>
                        <div class="flex flex-wrap gap-4">
                            <button id="export-data-btn" class="btn-primary flex items-center text-sm"><i data-lucide="download" class="mr-2"></i> Export Data (.json)</button>
                            <label for="import-file-input" class="btn-secondary flex items-center cursor-pointer text-sm">
                                <i data-lucide="upload" class="mr-2"></i> Import Data (.json)
                            </label>
                            <input type="file" id="import-file-input" accept=".json" class="hidden">
                        </div>
                    </div>

                    <div class="mb-6 bg-zinc-700 p-4 rounded-lg border border-zinc-600">
                        <h3 class="text-xl font-semibold mb-3 text-zinc-300">Theme Settings</h3>
                        <p class="text-zinc-400 mb-4 text-sm">Toggle between light and dark themes.</p>
                        <button id="settings-theme-toggle" class="btn-primary flex items-center text-sm"><i data-lucide="sun-moon" class="mr-2"></i> Toggle Theme</button>
                    </div>

                    <div class="mb-6 bg-zinc-700 p-4 rounded-lg border border-zinc-600">
                        <h3 class="text-xl font-semibold mb-3 text-red-400">Danger Zone</h3>
                        <p class="text-zinc-400 mb-4 text-sm">Permanently delete ALL your trading journal data from your browser. This action cannot be undone.</p>
                        <button id="delete-all-data-btn" class="btn-danger flex items-center text-sm"><i data-lucide="alert-triangle" class="mr-2"></i> Delete All Data</button>
                    </div>
                </div>
            `;
            lucide.createIcons(); // Ensure icons are rendered

            document.getElementById('export-data-btn').addEventListener('click', exportData);
            document.getElementById('import-file-input').addEventListener('change', importData);
            document.getElementById('settings-theme-toggle').addEventListener('click', toggleTheme);
            document.getElementById('delete-all-data-btn').addEventListener('click', deleteAllData);
        }

        /**
         * Exports all trade data as a JSON file.
         */
        async function exportData() {
            try {
                const trades = await getEntries(STORE_TRADES);
                const reflections = await getEntries(STORE_REFLECTIONS);
                const combinedData = { trades: trades, reflections: reflections };

                const dataStr = JSON.stringify(combinedData, null, 2);
                const blob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `trading_journal_backup_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                showMessage("Success", "Your data has been exported!");
            } catch (error) {
                console.error("Error exporting data:", error);
                showMessage("Error", "Failed to export data. Please try again.");
            }
        }

        /**
         * Imports trade data from a JSON file.
         * @param {Event} event - The file input change event.
         */
        async function importData(event) {
            const file = event.target.files[0];
            if (!file) {
                return;
            }

            const reader = new FileReader();
            reader.onload = async (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);
                    const importedTrades = importedData.trades;
                    const importedReflections = importedData.reflections;

                    if (!Array.isArray(importedTrades) || !Array.isArray(importedReflections)) {
                        showMessage("Import Error", "Invalid file format. Please upload a JSON object with 'trades' and 'reflections' arrays.");
                        return;
                    }

                    // Clear existing data before importing new data
                    await clearStore(STORE_TRADES);
                    await clearStore(STORE_REFLECTIONS);

                    const tradeTransaction = db.transaction([STORE_TRADES], 'readwrite');
                    const tradeObjectStore = tradeTransaction.objectStore(STORE_TRADES);
                    for (const trade of importedTrades) {
                        const tradeToStore = { ...trade };
                        delete tradeToStore.id; // Let IndexedDB auto-increment new IDs
                        tradeObjectStore.add(tradeToStore);
                    }

                    const reflectionTransaction = db.transaction([STORE_REFLECTIONS], 'readwrite');
                    const reflectionObjectStore = reflectionTransaction.objectStore(STORE_REFLECTIONS);
                    for (const reflection of importedReflections) {
                        const reflectionToStore = { ...reflection };
                        delete reflectionToStore.id; // Let IndexedDB auto-increment new IDs
                        reflectionObjectStore.add(reflectionToStore);
                    }

                    tradeTransaction.oncomplete = reflectionTransaction.oncomplete = async () => {
                        await showMessage("Success", "Data imported successfully!");
                        allTrades = await getEntries(STORE_TRADES); // Re-fetch all trades to update cache
                        allReflections = await getEntries(STORE_REFLECTIONS); // Re-fetch all reflections to update cache

                        // Re-render current view to reflect new data
                        const currentView = document.getElementById('app-content').dataset.currentView;
                        showView(currentView);
                    };

                    tradeTransaction.onerror = reflectionTransaction.onerror = (error) => {
                        console.error("Error during import transaction:", error);
                        showMessage("Import Error", "Failed to import some data. Check console for details.");
                    };

                } catch (error) {
                    console.error("Error parsing import file:", error);
                    showMessage("Import Error", "Could not read the file. Ensure it's a valid JSON format.");
                }
            };
            reader.readAsText(file);
        }

        /**
         * Deletes all data from both trade and reflection stores.
         */
        async function deleteAllData() {
            const confirmDelete = await showMessage(
                "Confirm Permanent Delete",
                "This will permanently delete ALL your trading journal data. This action cannot be undone. Are you absolutely sure?"
            );

            if (confirmDelete) {
                try {
                    await clearStore(STORE_TRADES);
                    await clearStore(STORE_REFLECTIONS);
                    allTrades = []; // Clear local cache
                    allReflections = []; // Clear local cache
                    await showMessage("Data Deleted", "All trading journal data has been successfully deleted.");
                    showView('dashboard'); // Go back to an empty dashboard
                } catch (error) {
                    console.error("Error deleting all data:", error);
                    showMessage("Error", "Failed to delete all data. Please try again.");
                }
            }
        }


        /**
         * Renders the Lot Size Calculator page.
         */
        function renderLotSizeCalculator() {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl mb-6 border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Lot Size Calculator</h2>
                    <p class="text-zinc-300 mb-4">View lot sizes for various instruments and calculate amounts based on desired lots.</p>

                    <div class="mb-4 input-group">
                        <i data-lucide="search" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                        <input type="text" id="lot-calculator-search" placeholder="Search by Company or Symbol" class="w-full">
                    </div>

                    <div class="trade-table-container">
                        <table class="trade-table">
                            <thead>
                                <tr>
                                    <th>S.No.</th>
                                    <th>Company</th>
                                    <th>Symbol</th>
                                    <th>Lot Size</th>
                                    <th class="text-center">Lots</th>
                                    <th class="text-right">Amount (₹)</th>
                                </tr>
                            </thead>
                            <tbody id="lot-size-table-body">
                                <!-- Data will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                    <p id="no-lot-data-message" class="text-center text-zinc-400 mt-4 hidden">No matching instruments found.</p>
                </div>
            `;
            lucide.createIcons();
            const searchInput = document.getElementById('lot-calculator-search');
            searchInput.addEventListener('input', filterAndDisplayLotSizes);
            filterAndDisplayLotSizes(); // Initial display
        }

        /**
         * Filters and displays lot size data.
         */
        function filterAndDisplayLotSizes() {
            const query = document.getElementById('lot-calculator-search').value.toLowerCase();
            const tbody = document.getElementById('lot-size-table-body');
            const noDataMessage = document.getElementById('no-lot-data-message');
            tbody.innerHTML = '';

            const filtered = INSTRUMENTS_AND_LOT_SIZES.filter(item =>
                item.company.toLowerCase().includes(query) || item.symbol.toLowerCase().includes(query)
            );

            if (filtered.length === 0) {
                noDataMessage.classList.remove('hidden');
            } else {
                noDataMessage.classList.add('hidden');
                filtered.sort((a,b) => a.symbol.localeCompare(b.symbol)); // Sort by symbol

                filtered.forEach((item, index) => { // Added index for S.No.
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-3 py-2">${index + 1}</td> <!-- Serial Number -->
                        <td class="px-3 py-2">${item.company}</td>
                        <td class="px-3 py-2 font-semibold text-indigo-300">${item.symbol}</td>
                        <td class="px-3 py-2 text-center">${item.lotSize}</td>
                        <td class="px-3 py-2 text-center">
                            <input type="number" class="lots-input w-20 text-center bg-zinc-700 rounded-md border border-zinc-600 px-2 py-1" data-lot-size="${item.lotSize}" value="1">
                        </td>
                        <td class="px-3 py-2 text-right amount-display">${formatRupee(item.lotSize * 1)}</td>
                    `;
                    tbody.appendChild(row);
                });

                // Add event listeners for lots input
                document.querySelectorAll('.lots-input').forEach(input => {
                    input.addEventListener('input', (event) => {
                        const lots = parseInt(event.target.value) || 0;
                        const lotSize = parseInt(event.target.dataset.lotSize);
                        const amount = lots * lotSize;
                        event.target.closest('tr').querySelector('.amount-display').textContent = formatRupee(amount);
                    });
                });
            }
        }

        /**
         * Renders the Brokerage Calculator page.
         */
        function renderBrokerageCalculator() {
            const appContent = document.getElementById('app-content');
            appContent.innerHTML = `
                <div class="bg-zinc-800 rounded-lg p-6 shadow-xl mb-6 border border-zinc-700">
                    <h2 class="text-2xl font-bold mb-5 text-indigo-400">Brokerage Calculator</h2>
                    <p class="text-zinc-300 mb-4">Calculate estimated Net P&L after brokerage and taxes.</p>

                    <div class="form-section col-span-full">
                        <h3 class="form-section-title flex items-center"><i data-lucide="dollar-sign" class="mr-2"></i> Trade Details for Calculation</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="col-span-full input-group relative">
                                <i data-lucide="building-2" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <input type="text" id="calc-instrument" placeholder="Instrument Symbol (e.g., NIFTY)" required>
                                <div id="calc-autocomplete-suggestions" class="autocomplete-suggestions"></div>
                            </div>
                            <div class="input-group">
                                <i data-lucide="clipboard-type" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <select id="calc-trade-type" required>
                                    <option value="">Select Type</option>
                                    <option value="equity_delivery">Equity Delivery</option>
                                    <option value="equity_intraday">Equity Intraday</option>
                                    <option value="futures">Futures</option>
                                    <option value="options">Options</option>
                                </select>
                            </div>
                            <div class="input-group">
                                <i data-lucide="indian-rupee" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <input type="number" id="calc-buy-price" step="0.01" placeholder="Buy Price" required>
                            </div>
                            <div class="input-group">
                                <i data-lucide="indian-rupee" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <input type="number" id="calc-sell-price" step="0.01" placeholder="Sell Price" required>
                            </div>
                            <div class="input-group">
                                <i data-lucide="hash" class="text-zinc-400 mr-3 flex-shrink-0"></i>
                                <input type="number" id="calc-quantity" placeholder="Quantity / Lots" required>
                            </div>
                        </div>
                        <div class="col-span-full flex justify-end mt-4">
                            <button type="button" id="calculate-brokerage-btn" class="btn-primary">Calculate Net P&L</button>
                        </div>
                    </div>

                    <div class="form-section col-span-full mt-6">
                        <h3 class="form-section-title flex items-center"><i data-lucide="bar-chart-2" class="mr-2"></i> Calculation Result</h3>
                        <div class="grid grid-cols-1 gap-4">
                            <div class="input-group">
                                <span class="text-zinc-300 mr-3">Gross P&L:</span>
                                <span id="calc-gross-pnl" class="font-bold text-lg text-white">₹0.00</span>
                            </div>
                            <div class="input-group">
                                <span class="text-zinc-300 mr-3">Total Charges:</span>
                                <span id="calc-total-charges" class="font-bold text-lg text-white">₹0.00</span>
                            </div>
                            <div class="input-group">
                                <span class="text-zinc-300 mr-3">Net P&L (After Charges):</span>
                                <span id="calc-net-pnl" class="font-bold text-xl text-white">₹0.00</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            lucide.createIcons();
            setupBrokerageCalculatorEvents();
        }

        /**
         * Sets up event listeners for the Brokerage Calculator.
         */
        function setupBrokerageCalculatorEvents() {
            const calcInstrumentInput = document.getElementById('calc-instrument');
            const calcTradeTypeSelect = document.getElementById('calc-trade-type');
            const calcBuyPriceInput = document.getElementById('calc-buy-price');
            const calcSellPriceInput = document.getElementById('calc-sell-price');
            const calcQuantityInput = document.getElementById('calc-quantity');
            const calculateBtn = document.getElementById('calculate-brokerage-btn');
            const calcGrossPnl = document.getElementById('calc-gross-pnl');
            const calcTotalCharges = document.getElementById('calc-total-charges');
            const calcNetPnl = document.getElementById('calc-net-pnl');
            const calcAutocompleteSuggestions = document.getElementById('calc-autocomplete-suggestions');

            // Autocomplete for instrument
            let activeCalcSuggestionIndex = -1;
            let filteredCalcSymbols = [];

            calcInstrumentInput.addEventListener('input', () => {
                const query = calcInstrumentInput.value.toUpperCase();
                calcAutocompleteSuggestions.innerHTML = '';
                calcAutocompleteSuggestions.style.display = 'none';
                activeCalcSuggestionIndex = -1;

                if (query.length < 2) return;

                filteredCalcSymbols = INSTRUMENTS_AND_LOT_SIZES.filter(item =>
                    item.symbol.includes(query) || item.company.toUpperCase().includes(query)
                ).slice(0, 10);

                if (filteredCalcSymbols.length > 0) {
                    filteredCalcSymbols.forEach((item, index) => {
                        const div = document.createElement('div');
                        div.className = 'autocomplete-suggestion-item';
                        div.textContent = `${item.symbol} (${item.company})`;
                        div.addEventListener('click', () => {
                            calcInstrumentInput.value = item.symbol;
                            calcAutocompleteSuggestions.innerHTML = '';
                            calcAutocompleteSuggestions.style.display = 'none';
                        });
                        calcAutocompleteSuggestions.appendChild(div);
                    });
                    calcAutocompleteSuggestions.style.display = 'block';
                }
            });

            calcInstrumentInput.addEventListener('keydown', (e) => {
                const items = calcAutocompleteSuggestions.querySelectorAll('.autocomplete-suggestion-item');
                if (items.length === 0) return;

                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    activeCalcSuggestionIndex = (activeCalcSuggestionIndex + 1) % items.length;
                    highlightCalcSuggestion(items);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    activeCalcSuggestionIndex = (activeCalcSuggestionIndex - 1 + items.length) % items.length;
                    highlightCalcSuggestion(items);
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (activeCalcSuggestionIndex > -1) {
                        items[activeCalcSuggestionIndex].click();
                    }
                } else if (e.key === 'Escape') {
                    calcAutocompleteSuggestions.innerHTML = '';
                    calcAutocompleteSuggestions.style.display = 'none';
                }
            });

            function highlightCalcSuggestion(items) {
                items.forEach((item, index) => {
                    if (index === activeCalcSuggestionIndex) {
                        item.classList.add('active');
                        item.scrollIntoView({ block: 'nearest' });
                    } else {
                        item.classList.remove('active');
                    }
                });
            }

            document.addEventListener('click', (e) => {
                if (!calcInstrumentInput.contains(e.target) && !calcAutocompleteSuggestions.contains(e.target)) {
                    calcAutocompleteSuggestions.innerHTML = '';
                    calcAutocompleteSuggestions.style.display = 'none';
                }
            });

            calculateBtn.addEventListener('click', () => {
                const instrument = calcInstrumentInput.value.toUpperCase();
                const tradeType = calcTradeTypeSelect.value;
                const buyPrice = parseFloat(calcBuyPriceInput.value);
                const sellPrice = parseFloat(calcSellPriceInput.value);
                const quantity = parseFloat(calcQuantityInput.value);

                if (!instrument || !tradeType || isNaN(buyPrice) || isNaN(sellPrice) || isNaN(quantity) || quantity <= 0) {
                    showMessage("Input Error", "Please fill all fields with valid numbers.");
                    return;
                }

                const instrumentData = INSTRUMENTS_AND_LOT_SIZES.find(item => item.symbol === instrument);
                const lotSize = (tradeType === 'futures' || tradeType === 'options') ? (instrumentData ? instrumentData.lotSize : 1) : 1;

                const grossPnl = (sellPrice - buyPrice) * quantity * lotSize;
                const charges = calculateBrokerageAndTaxes(tradeType, buyPrice, sellPrice, quantity, lotSize);
                const netPnl = grossPnl - charges.totalCharges;

                calcGrossPnl.textContent = formatRupee(grossPnl);
                calcTotalCharges.textContent = formatRupee(charges.totalCharges);
                calcNetPnl.textContent = formatRupee(netPnl);
                calcNetPnl.className = `font-bold text-xl mt-1 ${netPnl >= 0 ? 'text-emerald-400' : 'text-red-400'}`;
            });
        }


        // --- Date & Time and Percentage Circles Logic ---
        function initDateTimeAndPercentages() {
            const currentDateEl = document.getElementById('current-date');
            const currentTimeEl = document.getElementById('current-time');
            const daysMonthEl = document.getElementById('days-month');
            const daysYearEl = document.getElementById('days-year');

            function updateDateTimeAndProgress() {
                const now = new Date();
                const optionsDate = {
                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',
                    timeZone: 'Asia/Kolkata'
                };
                currentDateEl.textContent = now.toLocaleDateString('en-IN', optionsDate);

                const optionsTime = {
                    hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true,
                    timeZone: 'Asia/Kolkata'
                };
                currentTimeEl.textContent = now.toLocaleTimeString('en-IN', optionsTime);

                // Days remaining in month
                const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
                const daysInMonth = lastDayOfMonth.getDate();
                const daysLeftMonth = daysInMonth - now.getDate();
                daysMonthEl.textContent = `${daysLeftMonth} days`;

                // Days remaining in year
                const startOfYearDate = new Date(now.getFullYear(), 0, 1);
                const endOfYearDate = new Date(now.getFullYear(), 11, 31);
                const totalDaysInYear = Math.ceil((endOfYearDate - startOfYearDate) / (1000 * 60 * 60 * 24)) + 1;
                const passedDaysInYear = Math.floor((now - startOfYearDate) / (1000 * 60 * 60 * 24));
                const daysLeftYear = totalDaysInYear - passedDaysInYear;
                daysYearEl.textContent = `${daysLeftYear} days`;
            }

            updateDateTimeAndProgress();
            setInterval(updateDateTimeAndProgress, 1000); // Update every second
        }

        // --- User-provided Quote Carousel Logic ---
        function initQuotes() {
            const quoteText = document.getElementById('quoteText');
            const quoteAuthor = document.getElementById('quoteAuthor');

            function showRandomQuote() {
                const quote = quotesData[Math.floor(Math.random() * quotesData.length)];
                let text = '';
                let author = '';

                // Ensure quote is an object, or convert string to object
                if (typeof quote === 'string') {
                    const parts = quote.split(' - ');
                    text = parts[0];
                    author = parts.length > 1 ? parts[1] : '';
                } else {
                    text = quote.text;
                    author = quote.author;
                }

                quoteText.textContent = `"${text}"`;
                quoteAuthor.textContent = author ? `- ${author}` : '';
            }

            showRandomQuote();
            setInterval(showRandomQuote, 10000); // Change quote every 10 seconds
        }

        // --- Theme Toggle Logic ---
        function toggleTheme() {
            const html = document.documentElement;
            if (html.classList.contains('dark')) {
                html.classList.remove('dark');
                html.classList.add('light');
                localStorage.setItem('theme', 'light');
            } else {
                html.classList.remove('light');
                html.classList.add('dark');
                localStorage.setItem('theme', 'dark');
            }
            // Re-render current view to apply new theme colors to charts if needed
            const currentView = document.getElementById('app-content').dataset.currentView;
            showView(currentView); // This will re-render charts with correct colors
        }

        function applySavedTheme() {
            const savedTheme = localStorage.getItem('theme') || 'dark'; // Default to dark
            if (savedTheme === 'light') {
                document.documentElement.classList.remove('dark');
                document.documentElement.classList.add('light');
            } else {
                document.documentElement.classList.remove('light');
                document.documentElement.classList.add('dark');
            }
        }

        // --- Navigation Logic ---
        async function showView(viewId, data = null) {
            const appContent = document.getElementById('app-content');
            appContent.dataset.currentView = viewId; // Store current view

            // Before rendering a new view, destroy all existing charts
            destroyAllCharts();

            switch (viewId) {
                case 'dashboard':
                    await renderDashboard();
                    break;
                case 'add-trade':
                    renderAddTradeForm(data); // Pass data for editing
                    break;
                case 'view-trades':
                    await renderViewTrades();
                    break;
                case 'analytics': // New analytics view
                    await renderAnalytics();
                    break;
                case 'reflections':
                    await renderReflections();
                    break;
                case 'lot-size-calculator': // New Lot Size Calculator view
                    renderLotSizeCalculator();
                    break;
                case 'brokerage-calculator': // New Brokerage Calculator view
                    renderBrokerageCalculator();
                    break;
                case 'settings':
                    renderSettings();
                    break;
                default:
                    await renderDashboard(); // Default to dashboard
            }
            // Close sidebar on mobile after navigation
            const sidebar = document.getElementById('sidebar');
            if (window.innerWidth <= 768 && sidebar.classList.contains('active')) {
                sidebar.classList.remove('active'); // Hide sidebar
            }
            // Highlight active nav link
            document.querySelectorAll('nav ul li a').forEach(link => {
                link.classList.remove('bg-indigo-700', 'text-white');
                if (link.id === `nav-${viewId}`) {
                    link.classList.add('bg-indigo-700', 'text-white');
                }
            });
        }

        // --- Event Listeners ---
        document.addEventListener('DOMContentLoaded', async () => {
            applySavedTheme();
            await openDB(); // Open IndexedDB when DOM is ready

            // Initial rendering of user's header elements
            initDateTimeAndPercentages();
            initQuotes();

            showView('dashboard'); // Show dashboard on initial load

            // Navigation event listeners
            document.getElementById('nav-dashboard').addEventListener('click', (e) => { e.preventDefault(); showView('dashboard'); });
            document.getElementById('nav-add-trade').addEventListener('click', (e) => { e.preventDefault(); showView('add-trade'); });
            document.getElementById('nav-view-trades').addEventListener('click', (e) => { e.preventDefault(); showView('view-trades'); });
            document.getElementById('nav-analytics').addEventListener('click', (e) => { e.preventDefault(); showView('analytics'); });
            document.getElementById('nav-reflections').addEventListener('click', (e) => { e.preventDefault(); showView('reflections'); });
            document.getElementById('nav-lot-size-calculator').addEventListener('click', (e) => { e.preventDefault(); showView('lot-size-calculator'); });
            document.getElementById('nav-brokerage-calculator').addEventListener('click', (e) => { e.preventDefault(); showView('brokerage-calculator'); });
            document.getElementById('nav-settings').addEventListener('click', (e) => { e.preventDefault(); showView('settings'); });

            // Theme toggle button in sidebar
            document.getElementById('theme-toggle').addEventListener('click', toggleTheme);

            // Mobile menu toggle
            const sidebar = document.getElementById('sidebar');
            const menuToggle = document.getElementById('menu-toggle');
            menuToggle.addEventListener('click', () => {
                sidebar.classList.toggle('active'); // Use 'active' class for mobile toggle
            });
            // Hide sidebar if clicking outside on mobile
            document.addEventListener('click', (event) => {
                // If it's a mobile view and sidebar is active AND click is outside sidebar AND not on menu toggle
                if (window.innerWidth <= 768 && sidebar.classList.contains('active') &&
                    !sidebar.contains(event.target) && !menuToggle.contains(event.target)) {
                    sidebar.classList.remove('active');
                }
            });


            // Handle window resize for sidebar visibility
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768) {
                    sidebar.classList.remove('active'); /* Ensure it's not 'active' (overlay) on desktop */
                    // sidebar will stay fixed due to its CSS definition
                } else {
                    // If resized to mobile, ensure sidebar is hidden unless explicitly opened
                    if (!sidebar.classList.contains('active')) { // If sidebar is currently not active (hidden)
                        // Do nothing, keep it hidden by default until toggle
                    }
                }
            });
        });
    </script>
</body>
</html>
